###############################################################################
# Copyright (c) IBM Corporation 2020
###############################################################################

###############################################################################
# This sample playbook demonstrates using various modules included in the
# Red Hat Ansible Certified Content for IBM Z core collection.
#
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventory zos-collection-sample.yaml
#
# Notes:
#  This sample demonstrates various ways to perform tasks using Ansible z/OS
#  core modules. Each module has options available on how automation can be
#  controlled. This sample does not demonstrate all options; refer to
#  the documentation or use ansible-doc to learn more about those options.
#
#  When running this playbook, review the comments on how this sample
#  interacts with your target. Ensure that you have the required authority and
#  permissions such as writing to the the target directories or creating
#  data sets.
#
#  Data sets created for this sample will follow the pattern
#  <USER>.SOME.DATA.SET, where USER indicates the user who submits the playbook.
# The user is identified by the Ansible variable `ansible_user`.
#
# Requirements:
#   IBM Open Enterprise Python for z/OS 3.8.2 or later
#   IBM Z Open Automation Utilities 1.0.3 PTF UI70141 / APAR PH26560 or later
#
###############################################################################

---
- hosts: zvm
  collections:
    - ibm.ibm_zos_core
  gather_facts: no
  environment: "{{ environment_vars }}"
  connection: ibm.ibm_zos_core.zos_ssh

  tasks:
    # ##########################################################################
    # Modules: zos_copy, zos_lineinfile, zos_mvs_raw, zos_job_submit
    # ##########################################################################
    # +-------------------------------------------------------------------------
    # | - Using zos_copy, copy directory {{ playbook_dir }}/files to z/OS
    # |   managed node into a data set, each file will be a data set member
    # | - Using zos_copy, make a copy of member UPTIME JCL as PSA JCL
    # | - Using zos_lineinfile, edit JCL PSA replacing the uptime command with a
    # |   ps -A command to show all processes in USS
    # | - Using zos_job_submit, submit both JCLs, UPTIME and PSA
    # | - Using zos_data_set, create a temporary data set
    # | - Using zos_mvs_raw, call utility to terse the temporary data set
    # | - Using zos_fetch, fetch both the tersed archive and the data set
    # | - Tear down by cleaning up files.
    # +-------------------------------------------------------------------------
    - name: "Copy local directory {{ playbook_dir }}/files to {{ ansible_user | upper }}.SOME.DATA.SET"
      zos_copy:
        src: "{{ playbook_dir }}/files"
        dest: "{{ ansible_user | upper }}.SOME.DATA.SET"
        encoding:
          from: ISO8859-1
          to: IBM-1047
      register: result_copy_dir

    - name: "Response for copy local directory {{ playbook_dir }}/files to {{ ansible_user | upper }}.SOME.DATA.SET."
      debug:
        var: result_copy_dir

    - name: "Copy PDS member {{ ansible_user | upper }}.SOME.DATA.SET(UPTIME) to a new PDS member {{ ansible_user | upper }}.SOME.DATA.SET(PSA)"
      zos_copy:
        src: "{{ ansible_user | upper }}.SOME.DATA.SET(UPTIME)"
        dest: "{{ ansible_user | upper }}.SOME.DATA.SET(PSA)"
        remote_src: true

    - name: "Edit JCL PSA job card on z/OS managed node."
      zos_lineinfile:
        src: "{{ ansible_user | upper }}.SOME.DATA.SET(PSA)"
        state: present
        regexp: "//UPTIME    JOB (T043JM,JM00,1,0,0,0),'UPTIME - JRM',"
        line: "//PSA    JOB (T043JM,JM00,1,0,0,0),'PSA - JRM',"

    - name: "Edit JCL PSA step-name on z/OS managed node."
      zos_lineinfile:
        src: "{{ ansible_user | upper }}.SOME.DATA.SET(PSA)"
        state: present
        regexp: "//UPTIME  EXEC PGM=BPXBATCH"
        line: "//PSA  EXEC PGM=BPXBATCH"

    - name: "Edit JCL PSA USS command on z/OS managed node."
      zos_lineinfile:
        src: "{{ ansible_user | upper }}.SOME.DATA.SET(PSA)"
        state: present
        regexp: "SH uptime"
        line: "SH ps -A"

    - name: "Submit the JCL {{ ansible_user | upper }}.SOME.DATA.SET(PSA)"
      zos_job_submit:
        src: "{{ ansible_user | upper }}.SOME.DATA.SET(PSA)"
        location: DATA_SET
        wait: true
      register: result_submit_psa

    - name: "Response for submitting JCL {{ ansible_user | upper }}.SOME.DATA.SET(PSA)"
      debug:
        var: result_submit_psa

    - name: "Submit the JCL {{ ansible_user | upper }}.SOME.DATA.SET(UPTIME)"
      zos_job_submit:
        src: "{{ ansible_user | upper }}.SOME.DATA.SET(UPTIME)"
        location: DATA_SET
        wait: true
      register: result_submit_uptime

    - name: "Response for submitting JCL {{ ansible_user | upper }}.SOME.DATA.SET(UPTIME)"
      debug:
        var: result_submit_uptime

    - block:
      - name: Create a temporary data set
        zos_data_set:
          type: seq
          space_primary: 5
          space_secondary: 1
          space_type: cyl
          record_length: 1024
        register: temp_data_set
        failed_when: temp_data_set is not defined or temp_data_set.get('names', [])|length == 0

    - name: Get the result of temp data set creation
      debug:
        var: temp_data_set

    - name: "Terse data set {{ ansible_user | upper }}.SOME.DATA.SET to {{ temp_data_set.get('names')[0] }}"
      zos_mvs_raw:
        program_name: amaterse
        parm: "SPACK"
        dds:
          - dd_data_set:
              dd_name: sysut1
              data_set_name: "{{ ansible_user | upper }}.SOME.DATA.SET"
              disposition: shr
          - dd_data_set:
              dd_name: sysut2
              data_set_name: "{{ temp_data_set.get('names')[0] }}"
              disposition: new
              replace: yes
              type: seq
              space_primary: 5
              space_secondary: 1
              space_type: cyl
              record_length: 1024
          - dd_output:
              dd_name: sysprint
              return_content:
                type: text
      register: terse_response

    - name: Get the output of terse execution
      debug:
        var: terse_response

    - name: "Fetch the tersed data set {{ temp_data_set.get('names')[0] }} to the local machine"
      zos_fetch:
        src: "{{ temp_data_set.get('names')[0] }}"
        dest: "{{ playbook_dir }}/"
        flat: true
        is_binary: true
      register: result

    - name: Result of fetching tersed PDS to the local machine
      debug:
        var: result

    - name: "Remove the temporary data set {{ temp_data_set.get('names')[0] }}"
      zos_data_set:
        name: "{{ temp_data_set.get('names')[0] }}"
        state: absent
      when: temp_data_set is defined and temp_data_set.names|length > 0

    - name: "Fetch {{ ansible_user | upper }}.SOME.DATA.SET to local machine"
      zos_fetch:
        src: "{{ ansible_user | upper }}.SOME.DATA.SET"
        dest: "{{ playbook_dir }}/"
        flat: true
        encoding:
          from: IBM-1047
          to: ISO8859-1
      register: result

    - name: "Result of fetching {{ ansible_user | upper }}.SOME.DATA.SET to local machine"
      debug:
        var: result

    - name: "Delete data set {{ ansible_user | upper }}.SOME.DATA.SET"
      zos_data_set:
        name: "{{ ansible_user | upper }}.SOME.DATA.SET"
        state: absent
