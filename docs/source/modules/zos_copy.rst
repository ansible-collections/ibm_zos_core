
:github_url: https://github.com/ansible-collections/ibm_zos_core/blob/dev/plugins/modules/zos_copy.py

.. _zos_copy_module:


zos_copy -- Copy data to z/OS
=============================



.. contents::
   :local:
   :depth: 1


Synopsis
--------
- The :ref:`zos_copy <zos_copy_module>` module copies a file or data set from a local or a remote machine to a location on the remote machine.
- Use the :ref:`zos_fetch <zos_fetch_module>` module to copy files or data sets from remote locations to the local machine.





Parameters
----------


backup
  Specifies whether a backup of destination should be created before copying data.

  When set to ``true``, the module creates a backup file or data set.

  The backup file name will be returned on either success or failure of module execution such that data can be retrieved.

  | **required**: False
  | **type**: bool


backup_name
  Specify a unique USS file name or data set name for the destination backup.

  If the destination (dest) is a USS file or path, the backup_name must be a file or path name, and the USS path or file must be an absolute path name.

  If the destination is an MVS data set, the backup_name must be an MVS data set name.

  If the backup_name is not provided, the default backup_name will be used. If the destination is a USS file or USS path, the name of the backup file will be the destination file or path name appended with a timestamp, e.g. ``/path/file_name.2020-04-23-08-32-29-bak.tar``.

  If the destination is an MVS data set, it will be a data set with a random name generated by calling the ZOAU API. The MVS backup data set recovery can be done by renaming it.

  If ``dest`` is a data set member and ``backup_name`` is not provided, the data set member will be backed up to the same partitioned data set with a randomly generated member name.

  | **required**: False
  | **type**: str


content
  When used instead of ``src``, sets the contents of a file or data set directly to the specified value.

  Works only when ``dest`` is a USS file, sequential data set, or a partitioned data set member.

  This is for simple values; for anything complex or with formatting, use `ansible.builtin.copy <https://docs.ansible.com/ansible/latest/modules/copy_module.html>`_

  If ``dest`` is a directory, then content will be copied to ``/path/to/dest/inline_copy``.

  | **required**: False
  | **type**: str


dest
  Remote absolute path or data set where the file should be copied to.

  Destination can be a USS path or an MVS data set name.

  If ``dest`` is a nonexistent USS file, it will be created.

  If ``dest`` is a nonexistent data set, storage management rules will be used to determine the volume where ``dest`` will be allocated.

  If ``src`` and ``dest`` are files and if the parent directory of ``dest`` does not exist, then the task will fail.

  When the ``dest`` is an existing VSAM (KSDS) or VSAM (ESDS), then source can be ESDS, KSDS or RRDS. The ``dest`` will be deleted and storage management rules will be used to determine the volume where ``dest`` will be allocated.

  When the ``dest`` is an existing VSAM (RRDS), then the source must be RRDS. The ``dest`` will be deleted and storage management rules will be used to determine the volume where ``dest`` will be allocated.

  When ``dest`` is and existing VSAM (LDS), then source must be LDS. The ``dest`` will be deleted and storage management rules will be used to determine the volume where ``dest`` will be allocated.

  When ``dest`` is a data set, you can override storage management rules by specifying both ``volume`` and other optional DS specs (type, space, record size, etc).

  | **required**: True
  | **type**: str


encoding
  Specifies which encodings the destination file or data set should be converted from and to.

  If ``encoding`` is not provided, the module determines which local and remote charsets to convert the data from and to. Note that this is only done for text data and not binary data.

  If ``encoding`` is provided and ``src`` is an MVS data set, task will fail.

  Only valid if ``is_binary`` is false.

  | **required**: False
  | **type**: dict


  from
    The encoding to be converted from

    | **required**: True
    | **type**: str


  to
    The encoding to be converted to

    | **required**: True
    | **type**: str



force
  If set to ``true``, the remote file or data set will be overwritten.

  If set to ``false``, the file or data set will only be copied if the destination does not exist.

  If set to ``false`` and destination exists, the module exits with a note to the user.

  | **required**: False
  | **type**: bool


ignore_sftp_stderr
  During data transfer through SFTP, the module fails if the SFTP command directs any content to stderr. The user is able to override this behavior by setting this parameter to ``true``. By doing so, the module would essentially ignore the stderr stream produced by SFTP and continue execution.

  When Ansible verbosity is set to greater than 3, either through the command line interface (CLI) using **-vvvv** or through environment variables such as **verbosity = 4**, then this parameter will automatically be set to ``true``.

  | **required**: False
  | **type**: bool


is_binary
  If set to ``true``, indicates that the file or data set to be copied is a binary file/data set.

  | **required**: False
  | **type**: bool


local_follow
  This flag indicates that any existing filesystem links in the source tree should be followed.

  | **required**: False
  | **type**: bool
  | **default**: True


mode
  The permission of the destination file or directory.

  If ``dest`` is USS, this will act as Unix file mode, otherwise ignored.

  It should be noted that modes are octal numbers. The user must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like ``0644`` or ``01777``)or quote it (like ``'644'`` or ``'1777'``) so Ansible receives a string and can do its own conversion from string into number. Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.

  The mode may also be specified as a symbolic mode (for example, ``u+rwx`` or ``u=rw,g=r,o=r``) or a special string `preserve`.

  ``preserve`` means that the file will be given the same permissions as the source file.

  | **required**: False
  | **type**: str


remote_src
  If set to ``false``, the module searches for ``src`` at the local machine.

  If set to ``true``, the module goes to the remote/target machine for ``src``.

  | **required**: False
  | **type**: bool


sftp_port
  Configuring the SFTP port used by the :ref:`zos_copy <zos_copy_module>` module has been deprecated and will be removed in ibm.ibm_zos_core collection version 1.5.0.

  Configuring the SFTP port with *sftp_port* will no longer have any effect on which port is used by this module.

  To configure the SFTP port used for module :ref:`zos_copy <zos_copy_module>`, refer to topic `using connection plugins <https://docs.ansible.com/ansible/latest/plugins/connection.html#using-connection-plugins>`_

  If ``ansible_port`` is not specified, port 22 will be used.

  | **required**: False
  | **type**: int


src
  Path to a file/directory or name of a data set to copy to remote z/OS system.

  If ``remote_src`` is true, then ``src`` must be the path to a Unix System Services (USS) file, name of a data set, or data set member.

  If ``src`` is a local path or a USS path, it can be absolute or relative.

  If ``src`` is a directory, destination must be a partitioned data set or a USS directory.

  If ``src`` is a file and dest ends with "/" or destination is a directory, the file is copied to the directory with the same filename as src.

  If ``src`` is a VSAM data set, destination must also be a VSAM.

  Wildcards can be used to copy multiple PDS/PDSE members to another PDS/PDSE.

  Required unless using ``content``.

  | **required**: False
  | **type**: str


validate
  Specifies whether to perform checksum validation for source and destination files.

  Valid only for USS destination, otherwise ignored.

  | **required**: False
  | **type**: bool


volume
  If ``dest`` does not exist, specify which volume ``dest`` should be allocated to.

  Only valid when the destination is an MVS data set.

  The volume must already be present on the device.

  If no volume is specified, storage management rules will be used to determine the volume where ``dest`` will be allocated.

  If the storage administrator has specified a system default unit name and you do not set a ``volume`` name for non-system-managed data sets, then the system uses the volumes associated with the default unit name. Check with your storage administrator to determine whether a default unit name has been specified.

  | **required**: False
  | **type**: str


destination_dataset
  These are settings to use when creating the destination data set

  | **required**: False
  | **type**: dict


  dd_type
    Organization of the destination

    | **required**: False
    | **type**: str
    | **default**: BASIC
    | **choices**: KSDS, ESDS, RRDS, LDS, SEQ, PDS, PDSE, MEMBER, BASIC


  space_primary
    If the destination *dest* data set does not exist , this sets the primary space allocated for the data set.

    The unit of space used is set using *space_type*.

    | **required**: False
    | **type**: str
    | **default**: 5


  space_secondary
    If the destination *dest* data set does not exist , this sets the secondary space allocated for the data set.

    The unit of space used is set using *space_type*.

    | **required**: False
    | **type**: str
    | **default**: 3


  space_type
    If the destination data set does not exist, this sets the unit of measurement to use when defining primary and secondary space.

    Valid units of size are ``K``, ``M``, ``G``, ``CYL``, and ``TRK``.

    | **required**: False
    | **type**: str
    | **default**: M
    | **choices**: K, M, G, CYL, TRK


  record_format
    If the destination data set does not exist, this sets the format of the data set. (e.g ``FB``)

    Choices are case-insensitive.

    | **required**: False
    | **type**: str
    | **default**: FB
    | **choices**: FB, VB, FBA, VBA, U


  record_length
    The length of each record in the data set, in bytes.

    For variable data sets, the length must include the 4-byte prefix area.

    Defaults vary depending on format: If FB/FBA 80, if VB/VBA 137, if U 0.

    | **required**: False
    | **type**: int
    | **default**: 80


  block_size
    The block size to use for the data set.

    | **required**: False
    | **type**: int





Examples
--------

.. code-block:: yaml+jinja

   
   - name: Copy a local file to a sequential data set
     zos_copy:
       src: /path/to/sample_seq_data_set
       dest: SAMPLE.SEQ.DATA.SET

   - name: Copy a local file to a USS location and validate checksum
     zos_copy:
       src: /path/to/test.log
       dest: /tmp/test.log
       validate: true

   - name: Copy a local ASCII encoded file and convert to IBM-1047
     zos_copy:
       src: /path/to/file.txt
       dest: /tmp/file.txt

   - name: Copy a local directory to a PDSE
     zos_copy:
       src: /path/to/local/dir/
       dest: HLQ.DEST.PDSE

   - name: Copy file with permission details
     zos_copy:
       src: /path/to/foo.conf
       dest: /etc/foo.conf
       mode: 0644
       group: foo
       owner: bar

   - name: Module will follow the symbolic link specified in src
     zos_copy:
       src: /path/to/link
       dest: /path/to/uss/location
       local_follow: true

   - name: Copy a local file to a PDS member and convert encoding
     zos_copy:
       src: /path/to/local/file
       dest: HLQ.SAMPLE.PDSE(MEMBER)
       encoding:
         from: UTF-8
         to: IBM-037

   - name: Copy a VSAM (KSDS) to a VSAM (KSDS)
     zos_copy:
       src: SAMPLE.SRC.VSAM
       dest: SAMPLE.DEST.VSAM
       remote_src: true

   - name: Copy inline content to a sequential dataset and replace existing data
     zos_copy:
       content: 'Inline content to be copied'
       dest: SAMPLE.SEQ.DATA.SET

   - name: Copy a USS file to sequential data set and convert encoding beforehand
     zos_copy:
       src: /path/to/remote/uss/file
       dest: SAMPLE.SEQ.DATA.SET
       remote_src: true

   - name: Copy a USS directory to another USS directory
     zos_copy:
       src: /path/to/uss/dir
       dest: /path/to/dest/dir
       remote_src: true

   - name: Copy a local binary file to a PDSE member
     zos_copy:
       src: /path/to/binary/file
       dest: HLQ.SAMPLE.PDSE(MEMBER)
       is_binary: true

   - name: Copy a sequential data set to a PDS member
     zos_copy:
       src: SAMPLE.SEQ.DATA.SET
       dest: HLQ.SAMPLE.PDSE(MEMBER)
       remote_src: true

   - name: Copy a local file and take a backup of the existing file
     zos_copy:
       src: /path/to/local/file
       dest: /path/to/dest
       backup: true
       backup_name: /tmp/local_file_backup

   - name: Copy a PDS on remote system to a new PDS
     zos_copy:
       src: HLQ.SRC.PDS
       dest: HLQ.NEW.PDS
       remote_src: true

   - name: Copy a PDS on remote system to a PDS, replacing the original
     zos_copy:
       src: HLQ.SAMPLE.PDSE
       dest: HLQ.EXISTING.PDSE
       remote_src: true

   - name: Copy PDS member to a new PDS member. Replace if it already exists.
     zos_copy:
       src: HLQ.SAMPLE.PDSE(SRCMEM)
       dest: HLQ.NEW.PDSE(DESTMEM)
       remote_src: true

   - name: Copy a USS file to a PDSE member. If PDSE does not exist, allocate it.
     zos_copy:
       src: /path/to/uss/src
       dest: DEST.PDSE.DATA.SET(MEMBER)
       remote_src: true

   - name: Copy a sequential data set to a USS file
     zos_copy:
       src: SRC.SEQ.DATA.SET
       dest: /tmp/
       remote_src: true

   - name: Copy a PDSE member to USS file
     zos_copy:
       src: SRC.PDSE(MEMBER)
       dest: /tmp/member
       remote_src: true

   - name: Copy a PDS to a USS directory (/tmp/SRC.PDS).
     zos_copy:
       src: SRC.PDS
       dest: /tmp
       remote_src: true

   - name: Copy all members inside a PDS to another PDS
     zos_copy:
       src: SOME.SRC.PDS(*)
       dest: SOME.DEST.PDS
       remote_src: true

   - name: Copy all members starting with 'ABC' inside a PDS to another PDS
     zos_copy:
       src: SOME.SRC.PDS(ABC*)
       dest: SOME.DEST.PDS
       remote_src: true

   - name: Allocate destination in a specific volume
     zos_copy:
       src: SOME.SRC.PDS
       dest: SOME.DEST.PDS
       volume: 'VOL033'
       remote_src: true




Notes
-----

.. note::
   Destination data sets are assumed to be in catalog. When trying to copy to an uncataloged data set, the module assumes that the data set does not exist and will create it.

   Destination will be backed up if either ``backup`` is ``true`` or ``backup_name`` is provided. If ``backup`` is ``false`` but ``backup_name`` is provided, task will fail.

   When copying local files or directories, temporary storage will be used on the remote z/OS system. The size of the temporary storage will correspond to the size of the file or directory being copied. Temporary files will always be deleted, regardless of success or failure of the copy task.

   VSAM data sets can only be copied to other VSAM data sets.

   For supported character sets used to encode data, refer to the `documentation <https://ibm.github.io/z_ansible_collections_doc/ibm_zos_core/docs/source/resources/character_set.html>`_.

   :ref:`zos_copy <zos_copy_module>` uses SFTP (Secure File Transfer Protocol) for the underlying transfer protocol; Co:Z SFTP is not supported. In the case of Co:z SFTP, you can exempt the Ansible userid on z/OS from using Co:Z thus falling back to using standard SFTP.



See Also
--------

.. seealso::

   - :ref:`zos_fetch_module`
   - :ref:`zos_data_set_module`




Return Values
-------------


src
  Source file or data set being copied.

  | **returned**: changed
  | **type**: str
  | **sample**: /path/to/source.log

dest
  Destination file/path or data set name.

  | **returned**: success
  | **type**: str
  | **sample**: SAMPLE.SEQ.DATA.SET

checksum
  SHA256 checksum of the file after running zos_copy.

  | **returned**: C(validate) is C(true) and if dest is USS
  | **type**: str
  | **sample**: 8d320d5f68b048fc97559d771ede68b37a71e8374d1d678d96dcfa2b2da7a64e

backup_name
  Name of the backup file or data set that was created.

  | **returned**: if backup=true or backup_name=true
  | **type**: str
  | **sample**: /path/to/file.txt.2015-02-03@04:15~

gid
  Group id of the file, after execution.

  | **returned**: success and if dest is USS
  | **type**: int
  | **sample**: 100

group
  Group of the file, after execution.

  | **returned**: success and if dest is USS
  | **type**: str
  | **sample**: httpd

owner
  Owner of the file, after execution.

  | **returned**: success and if dest is USS
  | **type**: str
  | **sample**: httpd

uid
  Owner id of the file, after execution.

  | **returned**: success and if dest is USS
  | **type**: int
  | **sample**: 100

mode
  Permissions of the target, after execution.

  | **returned**: success and if dest is USS
  | **type**: str
  | **sample**: 420

size
  Size(in bytes) of the target, after execution.

  | **returned**: success and dest is USS
  | **type**: int
  | **sample**: 1220

state
  State of the target, after execution.

  | **returned**: success and if dest is USS
  | **type**: str
  | **sample**: file

note
  A note to the user after module terminates.

  | **returned**: C(force) is C(false) and dest exists
  | **type**: str
  | **sample**: No data was copied

msg
  Failure message returned by the module.

  | **returned**: failure
  | **type**: str
  | **sample**: Error while gathering data set information

stdout
  The stdout from a USS command or MVS command, if applicable.

  | **returned**: failure
  | **type**: str
  | **sample**: Copying local file /tmp/foo/src to remote path /tmp/foo/dest

stderr
  The stderr of a USS command or MVS command, if applicable.

  | **returned**: failure
  | **type**: str
  | **sample**: No such file or directory "/tmp/foo"

stdout_lines
  List of strings containing individual lines from stdout.

  | **returned**: failure
  | **type**: list
  | **sample**:

    .. code-block:: json

        [
            "u\"Copying local file /tmp/foo/src to remote path /tmp/foo/dest..\""
        ]

stderr_lines
  List of strings containing individual lines from stderr.

  | **returned**: failure
  | **type**: list
  | **sample**:

    .. code-block:: json

        [
            {
                "u\"FileNotFoundError": "No such file or directory \u0027/tmp/foo\u0027\""
            }
        ]

rc
  The return code of a USS or MVS command, if applicable.

  | **returned**: failure
  | **type**: int
  | **sample**: 8

cmd
  The MVS command issued, if applicable.

  | **returned**: failure
  | **type**: str
  | **sample**: REPRO INDATASET(SAMPLE.DATA.SET) OUTDATASET(SAMPLE.DEST.DATA.SET)

