# -*- coding: utf-8 -*-

# Copyright (c) IBM Corporation 2024
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import absolute_import, division, print_function

__metaclass__ = type

import pytest
import time

class Volume:
    """ Volume class represents a volume on the z system, it tracks if the volume name
    and status of the volume with respect to the current test session."""
    def __init__(self, name):
        self.name = name
        self.in_use = False

    def __str__(self):
        return f'The volume {self.name} is in {self.in_use} in use'

    def use(self):
        self.in_use = True

    def free(self):
        self.in_use = False

class Volume_Handler:
    """ Class to manage use of the volumes generated by a session."""
    def __init__(self, list_volumes):
        self.volumes = list_volumes
        self.init_volumes()

    def get_available_vol(self):
        """ Check in the list of volumes one on use or not, also send a default
        volume 0 as is the one with more tracks available."""
        for volume in self.volumes:
            if not (volume.in_use):
                volume.use()
                return volume.name
        print("Not more volumes in disposal return volume 000000")
        return "000000"

    def free_vol(self, vol):
        """ Check from the array the volume is already free for other test to use."""
        for volume in self.volumes:
            if volume.name == vol:
                volume.free()

    def init_volumes(self):
        list_volumes = []
        for volume in self.volumes:
            list_volumes.append(Volume(volume))
        self.volumes =list_volumes


def get_volumes(ansible_zos_module):
    """Get an array of available volumes"""
    # Using the command d u,dasd,online to fill an array of available volumes with the priority
    # of of actives (A) and storage (STRG) first then online (O) and storage and if is needed, the
    # private ones but actives then to get a flag if is available or not every volumes
    # is a instance of a class to manage the use.
    hosts = ansible_zos_module
    list_volumes = []
    active_storage = []
    storage_online = []
    flag = False
    iteration = 5
    # The first run of the command d u,dasd,online,,n in the system can conclude with empty data
    # to ensure get volumes is why require not more 5 runs and lastly one second of wait.
    while not flag and iteration > 0:
        all_volumes = hosts.all.zos_operator(cmd="d u,dasd,online,,65536")
        time.sleep(1)
        for volume in all_volumes.contacted.values():
            all_volumes = volume.get('content')
        flag = True if len(all_volumes) > 5 else False
        iteration -= 1
    # Check if the volume is of storage and is active on prefer but also online as a correct option
    for info in all_volumes:
        vol_w_info = info.split()
        if vol_w_info[2] == 'O' and vol_w_info[4] == "STRG/RSDNT":
            storage_online.append(vol_w_info[3])
    # Insert a volumes for the class ls_Volumes to give flag of in_use and correct manage
    for vol in active_storage:
        list_volumes.append(vol)
    for vol in storage_online:
        list_volumes.append(vol)
    return list_volumes