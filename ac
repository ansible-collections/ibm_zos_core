#!/bin/sh
# ==============================================================================
# Copyright (c) IBM Corporation 2023
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

# ==============================================================================
# Global Vars
# ==============================================================================

# Note: using the venv.sh script to find the latest venv puts the current 'ac'
# in the scripts directory because venv.sh performs a 'cd $(dirname $0)' and
# then other scripts can't be found in the managed venv corectly. Although this
# is probably a temporary solution, we now take the same code from venv.sh and
# use it here in 'ac' to find the latst managed venv. What should be
# done is to have some meta-data written out to venv/* that this command 'ac'
# can easily find, might be helpful to have some stats like dates created and
# so on.
# VENV=`scripts/./venv.sh --latest_venv`

VENV_HOME_MANAGED=${PWD%/venv}/venv

# Normalize the version from 3.10.2 to 3010002000
# Do we we need that 4th octet?
normalize_version() {
    echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
}

# Method determines the lastest (highest number) version venv that is managed by ./ac
latest_venv(){
    dir_version_latest="0"
    test_for_managed_venv=`ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* 2>/dev/null`

    if [ ! -z "$test_for_managed_venv" ]; then
        for dir_version in `ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* | cut -d"-" -f2`; do
            if [ $(normalize_version $dir_version) -ge $(normalize_version $dir_version_latest) ]; then
                dir_version_latest=$dir_version
            fi
        done
        echo "${VENV_HOME_MANAGED}"/"venv-"$dir_version_latest
    fi
}

# Method will take a venv name such as venv-2.16 and validate that it exists
validate_venv(){
    option_venv=$1
    #test_for_managed_venv=`ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* 2>/dev/null`

    if [[ "$option_venv" =~ "latest" ]]; then
        test_for_managed_venv=`ls -d "$VENV_HOME_MANAGED"/venv-latest* 2>/dev/null`
        if [[ "$test_for_managed_venv" =~ "latest" ]]; then
            dir_version_latest=$option_venv
        fi
    #elif [ ! -z "$test_for_managed_venv" ]; then
    else
        for dir_version in `ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* | rev | cut -d"/" -f1| rev`; do
            if [ $dir_version == $option_venv ]; then
                dir_version_latest=$dir_version
            fi
        done
    fi

    if [ ! -z "$dir_version_latest" ]; then
        echo "${VENV_HOME_MANAGED}"/$dir_version_latest
    else
        echo "Unable to validate managed venv option $option_venv, exiting."
        exit
        fi
}

VENV=`latest_venv`

file=""
verbose=0
DIV="-----------------------------------------------------------------------"
CURRENT_DIR=`pwd`
cd $CURRENT_DIR
# VENV_BIN should equate to same as $VIRTUAL_ENV after the venv activate
if [ ! -z "$VENV" ]; then
    VENV_BIN=$VENV/bin
    VENV_BASENAME=`basename $VENV`
fi

CURR_DIR=`pwd`
RED=$'\e[1;31m'
GRN=$'\e[1;32m'
YEL=$'\e[1;33m'
BLU=$'\e[1;34m'
MAG=$'\e[1;35m'
CYN=$'\e[1;36m'
ENDC=$'\e[0m'
# 0 Docker is up, 1 docker is not up
DOCKER_INFO=`podman info> /dev/null 2>&1;echo $?`

# ==============================================================================
# Arg parsing helpers
# ==============================================================================

# ------------------------------------------------------------------------------
# This method generates an INFO message with green color and dividers. This
# message will always be sent to STDERR so that STDOUT can be reserved for
# return codes.. Use this method for messages to the console.
# ------------------------------------------------------------------------------
message(){
    printf '%s\n' "${GRN}${DIV}${ENDC}" >&2
    printf '%s\n' "${GRN}INFO:${ENDC} ${1}" >&2
    printf '%s\n' "${GRN}${DIV}${ENDC}" >&2
}

# ------------------------------------------------------------------------------
# This method generates an ERROR message with red color. This message
# will always be sent to STDERR so that STDOUT can be reserved for return codes.
# Use this method for error messages to the console.
# ------------------------------------------------------------------------------
message_error(){
    ERROR_MSG="${RED}ERROR${ENDC}: $1"
    printf '%s\n' "${ERROR_MSG}" >&2
    exit 1
}

message_warn(){
    WARN_MSG="${YEL}WARN${ENDC}: $1"
    printf '%s\n' "${WARN_MSG}" >&2
}

ensure_managed_venv_exists(){
    if [ -z "$VENV" ]; then
        echo "Option $1 requires that a managed virtual environment be configured. "\
        "Run $0 -venv-setup to create managed viritual environments. "\
        "For additional optons, use $0 --help."
        exit 1
    fi
}

terminate() {
    printf '%s\n' "$1" >&2
    exit 1
}

# ------------------------------------------------------------------------------
# Generate simple formated but incomplete help
# ------------------------------------------------------------------------------
# usage_simple(){
#     script="$0"
#     base_name_script=`basename "$script"`
#     grep '^##' "$script" | sed -e 's/^##//' -e "s/_PROG_/$base_name_script/" 1>&2
# }

# ------------------------------------------------------------------------------
# This method auto generates help based on the comments found in this script.
# ----------------+-------------------------------------------------------------
# Comment style   | Description
# ----------------+-------------------------------------------------------------
# '#->command:'   | `#->` followed by a keyword is the help command displayed
# ----------------+-------------------------------------------------------------
# '## '           | The first found pattern after a help command will be the
#                 | help command description. Subsequent such patterns will be
#                 | right justified and considered options or descriptions
# ----------------+-------------------------------------------------------------
# '# '            | This pattern is ignored and considered script comments
# ----------------+-------------------------------------------------------------
# ------------------------------------------------------------------------------
#->help:
## Print help message (-h, -? produce short version, otherwise verbose)
## Usage: ac [-h, -?, --help]
## Example:
##  $ ac --help
help(){
    if [ "$1" = "verbose" ]; then
        awk '{\
                if (($0 ~ /^#->[a-zA-Z\-\_0-9.]+:/)) { \
                    helpCommand = substr($0, 4, index($0, ":")); \
                    helpMessage ="";\
                } else if ($0 ~ /^##/) { \
                    if (helpMessage) { \
                        helpMessage ="                 "substr($0, 3); \
                    } else { \
                        helpMessage = substr($0, 3); \
                    } \
                    if (helpCommand && helpMessage) {\
                        printf "\033[36m%-16s\033[0m %s\n", helpCommand, helpMessage; \
                        helpCommand =""; \
                        commandContext="                  Supports format: <option> <value> and <option>=<value>";\
                        print commandContext;\
                    } else {\
                        print helpMessage
                    }
                }
            }' $0
    else
        awk '{\
            if (($0 ~ /^#->[a-zA-Z\-\_0-9.]+:/)) { \
                helpCommand = substr($0, 4, index($0, ":")); \
                helpMessage ="";\
            } else if ($0 ~ /^##[[:space:]][[:space:]]*\$[[:space:]]ac/) { \
					helpMessage = substr($0, 3); \
                if (helpCommand && helpMessage) {\
                   printf "\033[36m%-16s\033[0m %s\n", helpCommand, helpMessage; \
                   helpCommand =""; \
                } else {\
                    helpMessage="                 "substr($0, 3); \
                    print helpMessage
                }
            } else if ($0 ~ /^##[[:space:]][[:space:]]*\$[[:space:]]--/) { \
					helpMessage = substr($0, 3); \
                if (helpCommand && helpMessage) {\
                   printf "\033[36m%-16s\033[0m %s\n", helpCommand, helpMessage; \
                   helpCommand =""; \
                } else {\
                    helpMessage="                  "substr($0, 6); \
                    print helpMessage
                }
            }
        }' $0
    fi
}

# The case stmt sees it this way:
# --foo abc ---> $1 = foo, $2 = abc
# --foo=abc ---> $1 = --foo=abc
option_processor(){

    opt=$1
    arg=$2
    if [ "$arg" ]; then
       echo "$arg"
    elif [ "$opt" ]; then
        # Split up to "=" and set the remainder
        value=${opt#*=}
        # If the value is not the same as the option ($1),then assign it        .
        if [ "$opt" != "$value" ]; then
            echo $value
        else
            # Don't echo, will return from the function, send to error msg to stderr
            ERROR_MSG="${RED}ERROR${ENDC}: option $option requires a non-empty argument."
            printf '%s\n' "$ERROR_MSG" >&2
            echo "exit 1"
        fi
    fi
}

# If option_processor echo's an exit , the sanitize will execute it else it will
# just be a echo, might be worth seeing if this can just be called or embedded
# into the option_processor to simplify the calls
option_sanitize(){
    option_value=$1
    $option_value 2> /dev/null
}

# ==============================================================================
# Commands
# ==============================================================================

# ------------------------------------------------------------------------------
# Run a bandit security scan on the plugin directory
# ------------------------------------------------------------------------------
#->ac-bandit:
## Run a bandit security scan on the plugins directory, set the severity level.
## Usage: ac [--bandit <level>]
## Usage: ac [--bandit <level>]
## <level> - choose from 'l', 'll', 'lll'
##         - l all low, medium, high severity
##         - ll all medium, high severity
##         - lll all high severity
## Example:
##  $ ac --ac-bandit --level ll
##  $ ac --ac-bandit
ac_bandit(){
    option_level=$1
    if [ ! "$option_level" ]; then
        option_level="ll"
    fi
    message "Running Bandit scan with level '$option_level'"
    . $VENV_BIN/activate && python3 -m bandit -r plugins/* -"${option_level}"
}

# ------------------------------------------------------------------------------
# Build and install collection of the local GH branch.
# To not dirty the host, consider installing in the venv:
# ansible-galaxy -vv collection install --force -p venv/lib/python3.8/site-packages/ansible_collections
# ------------------------------------------------------------------------------
#->ac-build:
## Build and install collection of the local GH branch.
## Usage: ac [--ac-build]
## Example:
##  $ ac --ac-build
ac_build(){
    gh_branch=`git branch |grep "*" | cut -d" " -f2`
    message "Build and install collection of the local GH branch: '$gh_branch'."
    . $VENV_BIN/activate && rm -rf ibm-ibm_zos_core-*.tar.gz && \
		$VENV_BIN/ansible-galaxy collection build && \
			$VENV_BIN/ansible-galaxy collection install -f ibm-ibm_zos_core-*
}

# ------------------------------------------------------------------------------
# Run galaxy importer on collection.
# ------------------------------------------------------------------------------
#->ac-galaxy-importer:
## Build current branch and run galaxy importer on collection.
## Usage: ac [--ac-galaxy-importer]
## Example:
##  $ ac --ac-galaxy-importer
ac_galaxy_importer(){
    message "Running Galaxy Importer"
    . $VENV_BIN/activate && collection_name=$($VENV_BIN/ansible-galaxy collection build --force | awk -F/ '{print $NF}') && python -m galaxy_importer.main $collection_name
}

# Run a changelog lint locally
# ------------------------------------------------------------------------------
#->ac-changelog:
## Runs antsibull-changelog to generate the release changelog or perform a lint
## on changelog fragments or release notes.
## Usage: ac [--ac-changelog <command>]
## <command> - choose from 'init', 'lint', 'lint-changelog-yaml', 'release', 'generate'
##         - generate generate the changelog
##         - init set up changelog infrastructure for collection, or an other project
##         - lint check changelog fragments for syntax errors
##         - lint-changelog-yaml check syntax of changelogs/changelog.yaml file
##         - release add a new release to the change metadata
## Example:
##  $ ac --ac-changelog --command lint
##  $ ac --ac-changelog --command release
##  $ ac --ac-changelog
ac_changelog(){
    option_command=$1
    if [ ! "$option_command" ]; then
        option_command="lint"
    fi
    message "Running Changelog '$option_command'"
    . $VENV_BIN/activate && antsibull-changelog "${option_command}"
}

# ------------------------------------------------------------------------------
# Install an ibm_zos_core collection from galaxy (or how you have ansible.cfg configured)
# ------------------------------------------------------------------------------
#->ac-install:
## Install collection 'ibm_zos_core' from a repository such as Galaxy. If no
## version is specified, latest GA level in repository will be installed.
## Usage: ac [--ac-install] [--version <version>]
## Options:
##  version - The collection version
## Example:
##  $ ac --ac-install --version 1.5.0-beta.1
##  $ ac --ac-install
ac_install(){
    option_version=$1

    if [ "$option_version" ];then
        message "Installing 'ibm.ibm_zos_core' collection version=${option_version}."
        . $VENV_BIN/activate && $VENV_BIN/ansible-galaxy collection install -fc ibm.ibm_zos_core:${option_version}
    else
        message "Installing 'ibm.ibm_zos_core' lastet GA version."
        . $VENV_BIN/activate && $VENV_BIN/ansible-galaxy collection install -fc ibm.ibm_zos_core
    fi
}

# Run a make module doc
# ------------------------------------------------------------------------------
#->ac-module-doc:
## Runs make module-doc to generate the module documentation
## Usage: ac [--ac-module-doc]
## Example:
##  $ ac --ac-module-doc
ac_module_doc(){
    message "Running make module-doc"
    . $VENV_BIN/activate && cd docs/ && make module-doc
}

# ------------------------------------------------------------------------------
# Run ansible-lint on the locally checked out GH Branch
# ------------------------------------------------------------------------------
#->ac-lint:
## Run ansible-lint on the local GH branch with the production profile.
## Usage: ac [--ac-lint]
## Example:
##  $ ac --ac-lint
ac_ansible_lint(){
    gh_branch=`git branch |grep "*" | cut -d" " -f2`
    message "Linting with ansible-lint on GH branch: '$gh_branch'."
    . $VENV_BIN/activate && $VENV_BIN/ansible-lint --profile production
}

# ------------------------------------------------------------------------------
# Run the sanity test using docker given python version else default to venv
# ------------------------------------------------------------------------------
#->ac-sanity:
## Run ansible-test in docker if the docker engine is running, else run them in
## a managed virtual environment using the installed python version.
## Usage: ac [--ac-sanity] [--version <version>]
## Options:
##   <version> - Only applies to when docker is running.
##             - No version selection will run all available python versions in docker.
##             - choose from '2.6', '2.7', '3.5', '3.6', '3.7', '3.8', '3.9', ....
## Example:
##  $ ac --ac-sanity
##  $ ac --ac-sanity --version 3.10
ac_sanity(){
    option_version=$1
    if [ "${DOCKER_INFO}" == "0" ]; then
        if [ "${option_version}" ]; then
            message "Running ansible-test with docker container and python version ${option_version}."
            . $VENV_BIN/activate && export ANSIBLE_TEST_PREFER_PODMAN=1 && cd ~/.ansible/collections/ansible_collections/ibm/ibm_zos_core && \
                 ${VENV_BIN}/ansible-test sanity --python ${option_version} --requirements --docker default && \
                    cd ${CURR_DIR};
        else
            message "Running ansible-test with docker container and all python versions."
            . $VENV_BIN/activate && export ANSIBLE_TEST_PREFER_PODMAN=1 && cd ~/.ansible/collections/ansible_collections/ibm/ibm_zos_core && \
                ${VENV_BIN}/ansible-test sanity --requirements --docker default && \
                    cd ${CURR_DIR};
        fi
    else
        if [ "${option_version}" ]; then
            message "Docker engine is not running, version ${option_version} will be ignored."
        fi

        . $VENV_BIN/activate && VENV_PY_VER=`python3 --version | cut -d" " -f2 | cut -d"." -f1,2`
        message "Running ansible-test with managed python virtual environment: ${VENV}."
		. $VENV_BIN/activate && cd ~/.ansible/collections/ansible_collections/ibm/ibm_zos_core && \
			${VENV_BIN}/ansible-test sanity --python ${VENV_PY_VER} --requirements && \
				cd ${CURR_DIR};
    fi
}

# ------------------------------------------------------------------------------
# Run functional tests:
# ------------------------------------------------------------------------------
#->ac-test:
## Run the functional tests inside the managed python virtual environment.
## Usage: ac [--ac-test] [--host <host>] [--python <python>] [--zoau <zoau>] [--file <file>] [--debug <boolean>]
## Options:
##     host     - z/OS managed node to run test cases, no selection defaults to
##                a host registerd to your user id (`whoami`).
##     python   - IBM enterprise python version, choices are 3.8, 3.9, 3.10, 3.11,
##                no selection defauls to 3.8.
##     zoau     - ZOAU to use in testing, choices are 1.0.3, 1.1.1, 1.2.0, 1.2.1,
##                no selection defaults to 1.1.1 .
##     file     - the absoulte path to a test suite to run, no selection
##                defaults to all test suite running.
##     test     - a test case to run found in 'file', no selection
##                defaults to all tests in file running.
##     debug    - enable debug for pytest (-s), choices are true and false
## Example:
##  $ ac --ac-test --host ec01150a --python 3.10 --zoau 1.2.2\
##  $ --file tests/functional/modules/test_zos_operator_func.py --test test_zos_operator_positive_path --debug true
##  $ ac --ac-test --host ec33012a --python 3.10 --zoau 1.2.2 --file tests/functional/modules/test_zos_operator_func.py --debug true
##  $ ac --ac-test --file tests/functional/modules/test_zos_operator_func.py --debug true
##  $ ac --ac-test
ac_test(){
    host=$1
    python=$2
    zoau=$3
    file=$4
    test=$5
    debug=$6

    # Run test by node IDs, eg pytest -v tests/my-directory/test_demo.py::test_specific_function
    if [ "$file" ] && [ "$test" ]; then
        file="${file}::${test}"
    fi

    if [ "$debug" ]; then
        debug="-s"
    fi

    skip=$CURR_DIR/tests/functional/modules/test_module_security.py

    # Create the config always overwriting existing
    ${VENV}/./venv.sh --config ${host} ${python} ${zoau} ${VENV}

	# Check configuration was created in venv/config.yml, else error and exit
	if test ! -e  ${VENV}/config.yml; then
	    echo "No configuration was able to be created in ${VENV}/config.yml "
		exit 1
	fi

    #cd ${VENV_BIN}

    if [ "$file" ]; then
        . ${VENV_BIN}/activate && cd tests && ${VENV_BIN}/pytest --ignore="${skip}" $CURR_DIR/${file} --host-pattern=all --zinventory=${VENV}/config.yml "${debug}" >&2 ; echo $? >&1
        #. ${VENV_BIN}/activate && ${VENV_BIN}/pytest --ignore="${skip}" $CURR_DIR/${file} --host-pattern=all --zinventory=${VENV}/config.yml "${debug}" ; echo $?
    else
        for file in `ls tests/functional/modules/*.py`; do
            # For some reason '--ignore not being honored so injecting a work around
            if [ "$file" != "$skip" ]; then
                #. ${VENV_BIN}/activate && ${VENV_BIN}/pytest --ignore="${skip}" $CURR_DIR/${file} --host-pattern=all --zinventory=${VENV}/config.yml "${debug}"
                . ${VENV_BIN}/activate && ${VENV_BIN}/pytest --ignore="${skip}" $CURR_DIR/${file} --host-pattern=all --zinventory=${VENV}/config.yml "${debug}" >&2 ; echo $? >&1
            fi
        done
    fi

    # Clean up the collections folder after running the tests, temporary work around.
    rm -rf collections/ansible_collections

    #cd ${CURR_DIR}
}

# ------------------------------------------------------------------------------
# Run concurrent executor:
# ------------------------------------------------------------------------------
#->test-concurrent:
## Run the conncurrent executor (CE) that can drive test cases to a cluster of hosts.
## Usage: ac --test-concurrent [--host <str, str>] [--user <str>] --python <str> [--zoau <str>] [--pythonpath <str>]
##                             [--volumes <str, str>] [--file <str, str>] [--skip <str, str>] [--itr <int>] [--replay <int>]
##                             [--timeout <int>] [--throttle <bool>] [--workers <int>] [--maxjob <int>] [--maxnode <int>]
##                             [--bal <int>] [--verbose <bool>] [--verbosity <int>] [--debug <bool>] [--extra <str>]
## Options:
##     host (optional): -> --hostnames
##          - Space or comma delimited managed nodes to use.
##          - Entering one more managed nodes overrries the auto detection feature which
##            will build a cluster of managed nodes to run on.
##          - Only the host prefix is needed, e.g. 'ec01150a'
##     user (optional): -> --user
##          - Ansible user authorized to run tests on the managed node.
##     python (requred): -> --pyz
##          - IBM enterprise python version, e.g 3.10', '3.11', '3.12'
##     zoau (optional): -> --zoau
##          - ZOAU version to use. e.g. 1.2.5, 1.3.0, 1.3.1
##     pythonpath (optional): --pythonpath
##          - The absolute path to where the ZOAU python module is located.
##          - The can be for the precopiled binary, wheels or setup tools installation home.
##          - Default is to use the precompiled binary (until we establish wheel locations)
##     volumes (optional): -> --volumes
##          - The volumes to use with the test cases, overrides the auto volume assignment.
#           - Defaults to, "222222,000000"
##     file (optional): -> --paths
##          - Space or comma delimited test suites that should be included in the result.
##          - A test suite is a collection of test cases in a file that starts with
##           'test' and ends in '.py'.
##          - For all functional tests, use the `functional/*` notation.
##          - For all unit tests, use the `unit/*` notation for directories.
##          - Default is all functional and unit tests.
##          - A directory of test cases is such that it contains test suites.
##      skip (optional): -> --skip
##          - Space or comma delimited test suites that should not be included
##            in the result.
##          - Supply only the test suite name, the tooling will prepend the
##            necessay path.
##          - Default is to skip 'test_module_security.py', this can not be removed but
##            it can be replaced with another test or tests.
##      itr (optional): -> --itr
##          - Configure the number of iterations to rerun failed test cases.
##          - Each iteration will run only the prior iterations failed tests until
##            either their are no more iterations left or there are no more failed
##            tests to run.
##          - Default is 50 so that full regression can succeed.
##      replay (optional): -> --replay
##          - Instruct the CE to replay the entire command with all provided options
##            for only the failed tests.
##          - The idea behind this is if you did not set enough iterations, rather than
##            start all over you could instruce CE to rerun with the failed test cases
##            it has recorded, giving a higher probabity there will be success.
##          - Each replay will run only the prior iterations failed tests until
##            either their are no more replay's left or there are no more failed
##            tests to run.
##          - Default is 5, so that full regression can succeed.
##      timeout (optional): -> --timeout
##          - The maximum time in seconds a job should wait for completion.
##          - When set, a subprocess call executing pytest will waith this amount of time.
##          - Default is 300 seconds (5 minutes).
##      throttle (optional): -> --throttle --no-throttle
##          - Configuration throttles the managed node test execution such that a node will
##            only run one one job at at time, no matter the threads.
##          - If disabled (False), concurrency will increase, but has the risk of encountering
##            increased ansible connnection failures, while this could result in shorter regression
##            it could also result in longer times because of failed connections.
##          - Default is True, managed nodes will only execute one test at time.
##       workers (optional): -> --workers
##          - The numerical multiplier used to increase the number of worker threads.
##          - This value is multiplied by the number of managed nodes to calculate the
##            number of threads to start the CE thread pool with.
##          - Default is 1, so CE will have 1 thread for each managed node.
##          - Any value greater than 1, will automatically disable throttle.
##          - At this time, setting more threads could result in connection failures, see throttle.
##       maxjob (optional): -> --maxjob
##          - The maximum number of times a test case can fail before its removed from the job queue.
##          - This is helpful in indentifying a bug, possibly in a test case or module.
##          - Setting this value sets an upper bound limit on how many times a test case is permitted
##            to fail.
##          - Default is 10, such that the test will no longer be permitted to execute after 10.
##       maxnode (optional): -> --maxnode
##          - The maximum number tests that can fail on a managed node before the node is removed
##            from the node queue.
##          - This helpful in identifying a problematic managed node such that it may require an IPL.
##          - Default is 30, such that the managede will no longer be permitted to run tests after 30.
##          - After the default is exceeded, the managde node is set to OFFLINE status.
##       bal (optional): -> --bal
##          - The maximum number of times a test is perimtted to fail on a given managed node
##            before be assigned to a new managed node.
##          - This is helpful in identifying test cases that may be experiencing managned node latency,
##            this allows CE to assign the test case to a new less active managed node such that it might
##            a higher chance of success.
##          - Default is 10, after a test case fails 10 times on a node it will be assigned to a new managed node.
##      verbose (optional): -> --verbose --no-verbose
##          - Instruct CE to run with verbose stdout to the console.
##          - This will instruct CE to write all statistics to stdout.
##          - Default is 'False', no verbosity to the console.
##          - Statistics are always written to directory '/tmp' as text and HTML files.
##          - Files in '/tmp' will follow this name pattern, eg conncurrent-excutor-log-<replay>-<status>-<date>.<ext>
##              - examples are:
##                - concurrent-executor-log-00:21:24.txt
##                - concurrent-executor-log-replay-1-failure-00:21:24.html
##                - concurrent-executor-tests-replay-1-success-00:21:24.html
##       verbosity (optional): -> --verbosity
##          - Configure pytest verbosity level.
##          - Integer value corresponds to verbosity level.
##            - 1 = -v, 2 = -vv, 3 = -vvv, 4 = -vvvv
##          - Default is 0, no verbosity.
##       debug (optional): -> --capture --no-capture
##          - Instruct Pytest whether to capture any output (stdout/stderr), equivalent of pytest -s.
##          - Default False
##       extra (optional): -> --extra
##          - Extra commands passed to subprocess before pytest execution
##          - This is helpful if you want to expose insert an enviroment var or even
##            run a shell command before exeucting, e.g 'cd ../..'
##       returncode (optional): -> --returncode --no-returncode
##          - Instruct Pytest whether to capture any output (stdout/stderr), equivalent of pytest -s.
##          - Default False
## Example:
##  $ ac --ac-test --host ec01150a --python 3.10 --zoau 1.2.2 --file tests/functional/modules/test_zos_operator_func.py --test  test_zos_operator_positive_path --debug true
##  $ ac --ac-test --host ec33012a --python 3.10 --zoau 1.2.2 --file tests/functional/modules/test_zos_operator_func.py --debug true
##  $ ac --ac-test --file tests/functional/modules/test_zos_operator_func.py --debug true
##  $ ac --ac-test
##  $ ac --test-concurrent --host ec01130a --python 3.11 --zoau 1.3.0
##  $ ac --test-concurrent --host ec01130a --python 3.11 --zoau 1.3.0 --file test_zos_operator_func.py --debug true
test_concurrent(){

    # TODO: Replay 0 does not execute.
    # ----------------------------------------------------------------------------------------------------------------------------------
    # CE            -> AC           -> AC vars       -> var mapping                               -> defaults
    # ----------------------------------------------------------------------------------------------------------------------------------
    # --hostnames   -> --host       -> host=$1       -> pass through                              -> adhoc else auto discovered
    # --user        -> --user       -> user=$2       -> pass through                              -> adhoc else auto discovered
    # --pyz         -> --python     -> python=$3     -> pass through                              -> adhoc (auto translated to absolute path)
    # --zoau        -> --zoau       -> zoau=$4       -> pass through                              -> adhoc (auto translated to absolute path)
    # --pythonpath  -> --pythonpath -> pythonpath=$5 -> pass through                              -> 'zoau/lib' or 'zoau/lib/<pyz version>'
    # --volumes     -> --volumes    -> volumes=$6    -> pass through                              -> "222222,000000"
    # --paths       -> --file       -> file=$7       -> pass through                              -> "functional/*,unit/*"
    # --skip        -> --skip       -> skip=$8       -> pass through                              -> "test_module_security.py"
    # --itr         -> --itr        -> itr=$9        -> pass through                              -> 50
    # --replay      -> --replay     -> replay=$10    -> pass through                              -> 5
    # --timeout     -> --timeout    -> timeout=$11   -> pass through                              -> 300
    # --throttle    -> --throttle   -> throttle=$12  -> True = '--throttle', else '--no-throttle' -> True
    # --workers     -> --workers    -> workers=$13   -> pass through                              -> 1
    # --maxjob      -> --maxjob     -> maxjob=$14    -> pass through                              -> 10
    # --maxnode     -> --maxnode    -> maxnode=$15   -> pass through                              -> 30
    # --bal         -> --bal        -> bal=$16       -> pass through                              -> 10
    # --verbose     -> --verbose    -> verbose=$17   -> True = '--verbose', else '--no-verbose'   -> False
    # --verbosity   -> --verbosity  -> verbosity=$18 -> pass through                              -> 0
    # --capture     -> --debug      -> debug=$19     -> True = '--capture', else '--no-capture'   -> False
    # --extra       -> --extr       -> extra=$20     -> pass through                              -> "cd `pwd`"
    # ----------------------------------------------------------------------------------------------------------------------------------

    echo "host=${1} user=${2} python=${3} zoau=${4} pythonpath=${5} volumes=${6} file=${7} skip=${8} itr=${9} replay=${10}"\
    "timeout=${11} throttle=${12} workers=${13} maxjob=${14} maxnode=${15} bal=${16} verbose=${17} verbosity=${18} debug=${19} extra=${20} returncode=${21}"

    host="${1}"
    user="${2}"
    python="${3}"
    zoau="${4}"
    pythonpath="${5}"
    volumes="${6}"
    file="${7}"
    skip="${8}"
    itr="${9}"
    replay="${10}"
    timeout="${11}"
    throttle="${12}"
    workers="${13}"
    maxjob="${14}"
    maxnode="${15}"
    bal="${16}"
    verbose="${17}"
    verbosity="${18}"
    debug="${19}"
    extra="${20}"
    returncode="${21}"

    # Invoke shell script helpers to set variables if host is null
     if [ ! -z "${host}" ]; then
        read _host _user _pass <<<$($VENV/./venv.sh --host-credentials "${host}")
        host="${_host}"

        if [ -z "${user}" ]; then
            user="${_user}"
        fi

        if [ -z "${pass}" ]; then
            pass="${_pass}"
        fi
    fi

    # Convert the python from short notation to absolute path
    read _python <<<$($VENV/./mounts.sh --get-python-mount "${python}")
    python="${_python}"

    read _zoau_path <<<$($VENV/./mounts.sh --get-zoau-mount "${zoau}")
    zoau="${_zoau_path}"

    # Build a zoau precompiled binary path if $pythonpath is null
    if [ -z "${pythonpath}" ]; then
        if [ $(normalize_version $zoau) -lt 1003000000 ]; then
                pythonpath=$zoau_path/lib
        else
            suffix=`echo ${python#*cyp/v}`
            version=`echo ${suffix%*/pyz}`
            pythonpath_version=`echo $version|sed 's/r/./g'`
            pythonpath=$zoau_path/lib/$pythonpath_version
        fi
    fi

    first_entry=true
    file_tests=""
    array_func=($(ls "$CURR_DIR/tests/functional/modules/"))
    array_unit=($(ls "$CURR_DIR/tests/unit/"))
    corrected_file=""
    # Support shorter notation passed to the utils module 'get_test_case()'', the python module
    # does not support such notation because the module can be run from many locations and requires
    # absolute paths. This notation is translated to absolute paths.
    for i in $(echo $file | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$i" == "functional/*" ];then
            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/"
            fi
        elif [ "$i" == "unit/*" ];then
            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/"
            fi
        elif [[ "${array_func[@]}" =~ $i ]];then
            if [ ! -e "$CURR_DIR/tests/functional/modules/$i" ]; then
                message_error "File = $CURR_DIR/tests/functional/modules/$i not found."
            fi

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/$i"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/$i"
            fi
        elif [[ "${array_unit[@]}" =~ $i ]];then
            if [ ! -e "$CURR_DIR/tests/unit/$i" ]; then
                message_error "File = $CURR_DIR/tests/unit/$i not found."
            fi

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/$i"
            fi
        elif [[ $i == tests/functional/modules/* ]] || [[ $i == $CURR_DIR/tests/functional/modules/* ]] ;then
            message_warn "It appears an absolute path has been used, 'ac' will try to truncate it to the test suite."
            suffix=`echo ${i#*/modules/}`

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/$suffix"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/$suffix"
            fi
        elif [[ $i == tests/unit/* ]] || [[ $i == $CURR_DIR/tests/unit/* ]] ;then
            message_warn "It appears an absolute path has been used, 'ac' will try to truncate it to the test suite."
            suffix=`echo ${i#*/modules/}`

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/$suffix"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/$suffix"
            fi
        else
            message_error "File = $i, not found in project path = $CURR_DIR."
        fi
    done
    first_entry=true
    file=$file_tests
    #file="tests/functional/modules/test_load_balance_full.py"
    #file="/Users/ddimatos/git/gh/ibm_zos_core/scripts/test_load_balance_full.py"

    # Convert any comma separated strings to space delimited as needed by the tooling.
    first_entry=true
    skip_tests=""
    for i in $(echo $skip | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$first_entry" == "true" ];then
            first_entry=false
            skip_tests="$CURR_DIR/tests/functional/modules/$i"
        else
            skip_tests="$skip_tests $CURR_DIR/tests/functional/modules/$i"
        fi
    done
    skip=$skip_tests

    # Uppercase value for --throttle
    throttle=`echo $throttle | tr '[:lower:]' '[:upper:]'`
    if [ "$throttle" == "TRUE" ];then
        throttle="--throttle"
    else
        throttle="--no-throttle"
    fi

    # Uppercase value for --verbose
    verbose=`echo $verbose | tr '[:lower:]' '[:upper:]'`
    if [ "$verbose" == "TRUE" ];then
        verbose="--verbose"
    else
        verbose="--no-verbose"
    fi

    # Uppercase value for --capture
    debug=`echo $debug | tr '[:lower:]' '[:upper:]'`
    if [ "$debug" == "TRUE" ];then
        debug="--capture"
    else
        debug="--no-capture"
    fi

    # Uppercase value for --capture
    returncode=`echo $returncode | tr '[:lower:]' '[:upper:]'`
    if [ "$returncode" == "TRUE" ];then
        returncode="--returncode"
    else
        returncode="--no-returncode"
    fi

    # # Useful for debug to see what is acutally passed what ./ac will pass to ce.py
    # echo "host=${host} user=${user} python=${python} zoau=${zoau} pythonpath=${pythonpath} volumes=${volumes},"\
    #         "file=${file} skip=${skip} itr=${itr} replay=${replay} timeout=${timeout} throttle=${throttle}"\
    #         "workers=${workers} maxjob=${maxjob} maxnode=${maxnode} bal=${bal} verbose=${verbose}"\
    #         "verbosity=${verbosity} debug=${debug} extra=${extra} returncode=${returncode}"

    read _host _user _pass <<<$($VENV/./venv.sh --host-credentials "${host}")
    message "Compiling a list of test cases for the provided test suites excluding any skip tests.."
    # /ac --test-concurrent --host ec33012a --python 3.11 --zoau 1.3.0 --file "/Users/ddimatos/git/gh/ibm_zos_core/tests/functional/modules/test_load_balance_full.py"
    . $VENV_BIN/activate && python3 scripts/ce.py\
        --hostnames  "${host}"\
        --user "${user}"\
        --pyz "${python}"\
        --zoau "${zoau}"\
        --pythonpath "${pythonpath}"\
        --volumes "${volumes}"\
        --paths "${file}"\
        --skip "${skip}"\
        --itr "${itr}"\
        --replay "${replay}"\
        --timeout "${timeout}"\
        "${throttle}"\
        --workers "${workers}"\
        --maxjob "${maxjob}"\
        --maxnode "${maxnode}"\
        --bal "${bal}"\
        "${verbose}"\
        --verbosity "${verbosity}"\
        "${debug}"\
        --extra "${extra}"\
        "${returncode}"\
        # echo $rc

        #. ${VENV_BIN}/activate && ${VENV_BIN}/pytest --ignore="${skip}" $CURR_DIR/${file} --host-pattern=all --zinventory=${VENV}/config.yml "${debug}" >&2 ; echo $? >&1


}
# ------------------------------------------------------------------------------
# Print the configuration used to connect to the managed node for functional tests
# ------------------------------------------------------------------------------
#->ac-test-config:
## Disply the contents of configuration file used to run functional tests.
## Usage: ac [--ac-test-config]
## Example:
##  $ ac --ac-test-config
ac_test_config(){
	if [ -f "${VENV}/config.yml" ]; then
        message "Print test configuration used for functional testing."
	    cat ${VENV}/config.yml;
	else
        message "No configuration was found, run '--ac-test' to generate a configuration."
	fi
}

# ------------------------------------------------------------------------------
# Get a list of all test cases from the dependency finder depending on options
# ------------------------------------------------------------------------------
#->test-dep-find:
## Determine which test suites to run given the options selected.
## Usage: ac --test-dep-find [--branch <str,str>] [--skip <str, str>]
## Options:
##      branch (optional):
##          - The branch to compare to when performing dependency analaysis. The
##            comparison always uses the currently checked out local branch and
##            compares that to the 'branch' supplied.
##          - The default branch is 'dev'
##      skip (optional):
##          - Space or comma delimited test suites that should not be included
##            in the result.
##          - Supply only the test suite name, the tooling will prepend the
##            necessay path.
##          - Default is to skip 'test_module_security.py', this can not be removed but
##            it can be replaced with another test or tests.
##     pretty (optional):
##          - Pretty formatting where each value is a line follwoed by a line feed,
##            otherwise a list[str] format is returned.
## Example:
##  $ ac --test-dep-find --branch main --skip "test_module_security.py,test_zos_apf_func.py"
##  $ ac --test-dep-find --branch dev --skip "test_zos_apf_func.py"
##  $ ac --test-dep-find --branch main
##  $ ac --test-dep-find

ac_test_dep_finder(){
    branch=$1
    skip="$2"
    gh_branch=`git branch |grep "*" | cut -d" " -f2`

    # Convert any comma separated strings to space delimited as needed by the tooling.
    first_entry=true
    skip_tests=""
    for i in $(echo $skip | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$first_entry" == "true" ];then
            first_entry=false
            skip_tests="$CURR_DIR/tests/functional/modules/$i"
        else
            skip_tests="$skip_tests $CURR_DIR/tests/functional/modules/$i"
        fi
    done
    skip=$skip_tests

    # If branch is defined provide results on that comparison branch else default to the `dev` branch.
    if [ -z "$branch" ]; then
        branch="dev"
        message "Compiling a list functional and unit tests suites excluding skipped tests."
        . $VENV_BIN/activate && result=`$VENV_BIN/python ${VENV}/dependencyfinder.py -p ${CURRENT_DIR} -a -s "${skip}"`
    else
        message "Compiling a list dependent tests cases to run based on the changes between local branch '$gh_branch' and target branch '$branch', excluding skipped tests."
        . $VENV_BIN/activate && result=`$VENV_BIN/python ${VENV}/dependencyfinder.py -p ${CURRENT_DIR} -b ${branch} -s "${skip}" -m`
    fi

    # Uppercase value for --pretty
    pretty=`echo $3 | tr '[:lower:]' '[:upper:]'`
    if [ "$pretty" == "TRUE" ];then
        echo $result |tr '[[:space:]]' '\n'
    else
        export env_result=${result}
        result=`$VENV_BIN/python3 -c "from os import environ;all = environ['env_result'].split(',');print(str(all))"`
        echo $result
    fi
}

# ------------------------------------------------------------------------------
# Get a list of all test cases using pytest including parameterization
# ------------------------------------------------------------------------------
#->test-pytest-find:
## Get a list of parametizd test cases used by pytest
## Usage: ac --test-pytest-find [--file <str, str>] [--skip <str, str>] [--pretty <bool>]
## Options:
##     file (optional):
##         - Space or comma delimited test suites that should be included
##           in the result.
##         - A test suite is a collection of test cases in a file that starts with
##           'test' and ends in '.py'.
##         - For all functional tests, use the `functional/*` notation for directories.
##         - For all unit tests, use the `unit/*` notation for directories.
##         - Default is all functional and unit tests.
##         - A directory of test cases is such that it contains test suites.
##     skip (optional) - (str):
##         - Space or comma delimited test suites that should be omitted
##           in the result.
##         - A test suite is a collection of test cases in a file that starts with
##           'test' and ends in '.py'.
##          - Default is to skip 'test_module_security.py', this can not be removed but
##            it can be replaced with another test or tests.
##          - Test cases can be parametrized such they use the '::' syntax or not.
##          - Skip does not support directories.
##     pretty (optional):
##          - Pretty formatting where each value is a line follwoed by a line feed,
##            otherwise a list[str] format is returned.
## Example:
##  $ ac --test-pytest-find --file "test_zos_copy_func.py,test_zos_mvs_raw_unit.py" --skip "test_zos_job_submit_func.py,test_module_security.py" --pretty false
##  $ ac --test-pytest-find --file "functional/*,unit/*" --skip "test_module_security.py"
##  $ ac --test-pytest-find --file "test_zos_copy_func.py"
##  $ ac --test-pytest-find --pretty true
##  $ ac --test-pytest-find|wc -l
ac_test_pytest_finder(){
    file=$1
    skip="$2"

    first_entry=true
    file_tests=""
    array_func=($(ls "$CURR_DIR/tests/functional/modules/"))
    array_unit=($(ls "$CURR_DIR/tests/unit/"))

    # As a courtesy, aid in shorter notation supplied to the utils module get_test_case(), the python module
    # does not support such notation because the module can be run from many locations and requires absolute
    # paths.
    for i in $(echo $file | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$i" == "functional/*" ];then
            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/"
            fi
        elif [ "$i" == "unit/*" ];then
            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/"
            fi
        elif [[ "${array_func[@]}" =~ $i ]];then
            if [ ! -e "$CURR_DIR/tests/functional/modules/$i" ]; then
                message_error "File = $CURR_DIR/tests/functional/modules/$i not found."
            fi

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/$i"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/$i"
            fi
        elif [[ "${array_unit[@]}" =~ $i ]];then
            if [ ! -e "$CURR_DIR/tests/unit/$i" ]; then
                message_error "File = $CURR_DIR/tests/unit/$i not found."
            fi

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/$i"
            fi
        else
            message_error "File = $i, not found in project path = $CURR_DIR."
        fi
    done
    first_entry=true
    file=$file_tests
    export env_file=${file}

    # Convert any comma separated strings to space delimited as needed by the tooling.
    first_entry=true
    skip_tests=""
    for i in $(echo $skip | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$first_entry" == "true" ];then
            first_entry=false
            skip_tests="$CURR_DIR/tests/functional/modules/$i"
        else
            skip_tests="$skip_tests $CURR_DIR/tests/functional/modules/$i"
        fi
    done

    skip=$skip_tests
    export env_skip=${skip}

    message "Compiling a list of test cases for the provided test suites excluding any skip tests.."
    . $VENV_BIN/activate && result=`$VENV_BIN/python -c "from scripts.modules.utils import get_test_cases;from os import environ;\
        tests = get_test_cases(paths=environ['env_file'], skip=environ['env_skip']);all=','.join(tests);print(all)"`

    # Uppercase value for --pretty
    pretty=`echo $3 | tr '[:lower:]' '[:upper:]'`
    if [ "$pretty" == "TRUE" ];then
        echo $result |tr ',' '\n';
    else
        export env_result=${result}
        result=`$VENV_BIN/python3 -c "from os import environ;all = environ['env_result'].split(',');print(str(all))"`
        echo $result
    fi
}

# ------------------------------------------------------------------------------
# Check the version of the ibm_zos_core collection installed
# ------------------------------------------------------------------------------
#->ac-version:
## Obtain the version of the collection installed on the controller.
## Usage: ac [--ac-version]
## Example:
##  $ ac --ac-version
ac_version(){
    message "Ansible collection version installed on this controller."
    cat ~/.ansible/collections/ansible_collections/ibm/ibm_zos_core/MANIFEST.json \
    | grep version|cut -d ':' -f 2 | sed 's/,*$//g' | tr -d '"';
}

# ------------------------------------------------------------------------------
# Encrypt a file, it the users responsiblity to remove the uncrypted file
# afterwards, also ensure it does not end up in a public rep such that it is
# in .gitignore
# Consider adding salt
# # encrypt file.txt to file.enc using 256-bit AES in CBC mode
# openssl enc -aes-256-cbc -salt -in file.txt -out file.enc
# the same, only the output is base64 encoded for, e.g., e-mail
# openssl enc -aes-256-cbc -a -salt -in file.txt -out file.enc
# decrypt binary file.enc
# openssl enc -d -aes-256-cbc -in file.enc -out file.txt
# decrypt base64-encoded version
# openssl enc -d -aes-256-cbc -a -in file.enc -out file.txt
# ------------------------------------------------------------------------------
#->file-encrypt:
## Encrypt a file as a new file
## Usage: ac [--file-encrypt --file <file> --out-file <file> --password <password>]
## Options:
##     file     - the file to encrypt.
##     out-file - the encrypted output.
##     password - the key (password) used to encrypt the file.
## Example:
##  $ ac --file-encrypt --file some.txt --out-file some.txt.axx --password 12345678
file_encrypt(){
    option_file=$1
    option_out_file=$2
    option_pass=$3

    if [ ! "$option_file" ] || [ ! "$option_out_file" ] || [ ! "$option_pass" ]; then
        message "Unable to encrpyt file, missing option values."
        exit 1
    fi
    message "Encrypting file $option_file as file $option_out_file."
    touch $option_out_file
    chmod 700 $option_out_file
    echo "${option_pass}" | openssl enc -aes-256-cbc -a -salt -in $option_file -out $option_out_file -pass stdin
	#echo "${option_pass}" | openssl bf -a -in $option_file -out $option_out_file -pass stdin
}

# ------------------------------------------------------------------------------
# decrypt a file, it the users responsiblity to remove the uncrypted file
# afterwards, also ensure it does not end up in a public rep such that it is
# in .gitignore
# ------------------------------------------------------------------------------
#->file-decrypt:
## Decrypt a file as a new file and apply file permissions 700, RWX only to the owner.
## Usage: ac [--file-decrypt --file <file> --out-file <out-file> --password <password>]
## Options:
##     file     - the file to decrypt.
##     out-file - the decrypted output
##     password - the key (password) used when encrypting the file.
## Example:
##  $ ac --file-decrypt --file some.txt.axx --out-file some.txt --password 12345678
file_decrypt(){
    option_file=$1
    option_out_file=$2
    option_pass=$3
    if [ ! "$option_file" ] || [ ! "$option_out_file" ] || [ ! "$option_pass" ]; then
        message "Unable to decrpyt file, missing option values."
        exit 1
    fi
    message "Decrypting the file ${option_file} as ${option_out_file}."
	#echo "${option_pass}" | openssl bf -d -a -in $option_file -out $option_out_file -pass stdin
    echo "${option_pass}" | openssl enc -d -aes-256-cbc -a -in $option_file -out $option_out_file -pass stdin
    chmod 700 $option_out_file
}


# Cleanup and remove geneated doc for the collection if its not going to be
# checked in
# Example:
#     $ make cleanDoc
clean(){
    echo Todo
    # @. $(VENV_BIN)/activate && make -C docs clean
}

clean_doc(){
    echo Todo
    # cleanDoc
	# @. $(VENV_BIN)/activate && make -C docs clean
}

#->host-auth:
## Copy your ssh key to a `host` or the default which is your username.
## Usage: ac [--host-auth] [--host <host>]
## Options:
##     host     - z/OS managed node, no selection defaults to
##                a host registerd to your user id (`whoami`).
## Example:
##  $ ac --host-auth --host ec33012a
host_auth(){
    option_host=$1
    if [ ! "$option_host" ]; then
        host=`whoami`
    fi
    message "Copy SSH keys to the managed node $option_host"
    $VENV/./venv.sh --cert $option_host
}

# ------------------------------------------------------------------------------
# Copy mount & profile scripts to users home directory on the target and execute
# mount script. Should automatically authenticate your ssh key.
# ------------------------------------------------------------------------------
#->host-mount:
## Copy mount and profile scripts in users home directory and excute the mount.
## Usage: ac [--host-mount --host <host>]
## Options:
##     host     - z/OS managed node id, no selection defaults to
##                a host registerd to your user id (`whoami`).
## Example:
##  $ ac --host-mount --host ec33012a
host_mount(){
    option_host=$1
    if [ ! "$option_host" ]; then
        option_host=`whoami`
    fi
    host_auth $option_host
    message "Copying mount.env, mount.sh, profile.sh scripts to host $option_host and then mounting shared drive."
    #$VENV/./hosts.sh --cert $1
    $VENV/./venv.sh --host-setup-files $option_host $VENV/"mounts.env" $VENV/"mounts.sh" $VENV/"profile.sh"
    #$VENV/./hosts.sh --mount $1 $VENV/"mounts.env" $VENV/"mounts.sh" $VENV/"shell-helper.sh" $VENV/"profile.sh"
}

# ------------------------------------------------------------------------------
# Print the mount table contents
# ------------------------------------------------------------------------------
#->host-mounts:
## Print the ZOAU and Python mount tables used by this utility.
## Usage: ac [--host-mounts]
## Example:
##  $ ac --host-mounts
host_mounts(){
    message "Print mount tables used by the $0 utility"
    $VENV/mounts.sh --print-mount-tables
}

# ------------------------------------------------------------------------------
# Print the z/OS node IDs and hostnames
# ------------------------------------------------------------------------------
#->host-nodes:
## Display the z/OS node IDs and hostnames
## Usage: ac [--host-nodes --all <boolean>]
## Options:
##     all      - A list of all nodes, default is true. If all is set to false,
##                only a list space delimited nodes are returned.
## Example:
##  $ ac --host-nodes
##  $ ac --host-nodes --all false
host_nodes(){


    if [ "$all" == "false" ]; then
        message "Print z/OS production hostnames."
        result=`$VENV/venv.sh --targets-production`
    else
        message "Print z/OS node IDs and hostnames."
        result=`$VENV/venv.sh --targets`
    fi
    echo $result
}

# ------------------------------------------------------------------------------
# This is the only script that has to be relativly executed from (scripts/)
# because at this point, no managed venv exists.
# TODO: Support -force to replace/update and possible BYO reqs file
# ------------------------------------------------------------------------------
#->venv-setup:
## Create managed virtual environments using the latest (discovred) python3.
## If the password option is not provided, the info.env.axx file will not be
## associated to the managed venv's, thus you will see messages asking you to
## export some variables such as USER, HOST_SUFFIX, etc. Choosing not to use
## the 'password' option should only an option when the utility can not decrypt.
## Usage: ac [--venv-setup] [--password 123456]
## Example:
##  $ ac --venv-setup --password 123456
##  $ ac --venv-setup
venv_setup(){
    option_pass=$1
    message "Create managed virtual environments based on hosts latest python3."
    scripts/./venv.sh --vsetup --password $option_pass
}

# ------------------------------------------------------------------------------
# Allows you to activate the lastet ansible managed virtual enviroments
# TODO: Allow user to specify which venv they can start
# ------------------------------------------------------------------------------
#->venv-start:
## Activate the latest ansible managed virtual environment or optionally start
## by its name.
## Usage: ac [--venv-start --name <venv name>]
## Example:
##  $ ac --venv-start --name venv-2.16
##  $ ac --venv-start
venv_start(){
    option_name=$1

    if [ "$option_name" ]; then
        VENV=`validate_venv $option_name`

        if [ ! -z "$VENV" ]; then
            VENV_BIN=$VENV/bin
            VENV_BASENAME=`basename $VENV`
        fi
    fi

    message "Starting managed python virtual environment: $VENV_BASENAME"
    #. $VENV_BIN/activate; exec /bin/sh -i
    /bin/bash -c ". $VENV_BIN/activate; exec /bin/sh -i;"
}

# ------------------------------------------------------------------------------
# Allows you to deactivate the lastet ansible managed virtual enviroments
# TODO: Allow user to specify which venv they can stop
# ------------------------------------------------------------------------------
#->venv-stop:
## Deactivate the latest ansible managed virtual environment or optionally deactivate
## by its name.
## Usage: ac [--venv-stop --name <venv name>]]
## Example:
##  $ ac --venv-stop --name venv-2.16
##  $ ac --venv-stop
venv_stop(){
    option_name=$1

    if [ "$option_name" ]; then
        VENV=`validate_venv $option_name`

        if [ ! -z "$VENV" ]; then
            VENV_BIN=$VENV/bin
            VENV_BASENAME=`basename $VENV`
        fi
    fi

    message "Stopping managed ansible virtual environment located at: $VENV_BASENAME"
    # message "ac --venv-stop does not actually currently work, use CNTL-D"
    # . deactivate $VENV_BASENAME;
    # deactivate venv/$VENV_BASENAME
    venv_tty=`tty`
    venv_tty=`basename $venv_tty`
    venv_pid=`ps -ef |grep $venv_tty | grep -v "grep" | grep "/bin/sh -i" | awk '{print $3}'`
    kill -9 $venv_pid > /dev/null 2>&1
}

# ==============================================================================
# Main arg parsing
# ==============================================================================
while true; do
    option=$1
    if [ "$option" ]; then
        # Check that we see a '-' or '--' in all options, else error and exit.
        test_long_input=`echo "$option" | grep "^--?*"`
        test_short_input=`echo "$option" | grep "^-?*"`
        if [ ! "$test_short_input" ] && [ ! "$test_long_input" ]; then
            echo "Please use valid syntax for option $option, it appears to be missing '-' or '--'."
            exit 1
        fi
    fi
    case $1 in
      -h|-\?|--help)
        if [ "$1" = "-h" ] || [ "$1" = "-?" ]; then
            help
        else
            help "verbose"
        fi
         exit
         ;;
      --ac-bandit)                              # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-bandit"
            ;;
      --ac-build)                               # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-build"
            ;;
      --ac-galaxy-importer)                     # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-galaxy-importer"
            ;;
      --ac-changelog)                           # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-changelog"
            ;;
      --ac-module-doc)                          # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-module-doc"
            ;;
      --ac-install)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-install"
            ;;
      --ac-lint)                                # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-lint"
            ;;
      --ac-sanity |--ac-sanity=?*)              # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-sanity"
            ;;
      --ac-test|--ac-test=?*)                   # command
            ensure_managed_venv_exists $1
            option_submitted="--ac-test"
            ;;
      --ac-test-config|--ac-test-config=?*)     # command
            ensure_managed_venv_exists $1
            option_submitted="--ac-test-config"
            ;;
      --test-concurrent|--test-concurrent=?*)     # command
            ensure_managed_venv_exists $1
            option_submitted="--test-concurrent"
            ;;
      --test-dep-find|--test-dep-find=?*)       # command
            ensure_managed_venv_exists $1
            option_submitted="--test-dep-find"
            ;;
      --test-pytest-find|--test-pytest-find=?*) # command
            ensure_managed_venv_exists $1
            option_submitted="--test-pytest-find"
            ;;
      --ac-version)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-version"
            ;;
      --file-encrypt)                           # Command
            ensure_managed_venv_exists $1
            option_submitted="--file-encrypt"
            ;;
      --file-decrypt)                           # Command
            ensure_managed_venv_exists $1
            option_submitted="--file-decrypt"
            ;;
      --host-auth|--host-auth=?*)               # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-auth"
            ;;
      --host-config)                            # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-config"
            ;;
      --host-mount|--host-mount=?*)             # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-mount"
            ;;
      --host-mounts)                            # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-mounts"
            ;;
      --host-nodes)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-nodes"
            ;;
      --venv-setup)                             # Command
            option_submitted="--venv-setup"
            ;;
      --venv-start)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--venv-start"
            ;;
      --venv-stop)                              # Command
            ensure_managed_venv_exists $1
            option_submitted="--venv-stop"
            ;;
      --all|--all=?*)                           # option
            all=`option_processor $1 $2`
            option_sanitize $all
            shift
            ;;
      --bal|--bal=?*)                           # option
            bal=`option_processor $1 $2`
            option_sanitize $bal
            shift
            ;;
      --command|--command=?*)                   # option
            command=`option_processor $1 $2`
            option_sanitize $command
            shift
            ;;
      --branch|--branch=?*)                     # option
            branch=`option_processor $1 $2`
            option_sanitize $branch
            shift
            ;;
      --debug|--debug=?*)                       # option
            debug=`option_processor $1 $2`
            option_sanitize $debug
            shift
            ;;
      --extra|--extra=?*)                       # option
            extra=`option_processor $1 $2`
            option_sanitize $extra
            shift
            ;;
      --file|--file=?*)                         # option
            file=`option_processor $1 $2`
            option_sanitize $file
            shift
            ;;
      --host|--host=?*)                         # option
            host=`option_processor $1 $2`
            option_sanitize $host
            shift
            ;;
      --itr|--itr=?*)                           # option
            itr=`option_processor $1 $2`
            option_sanitize $itr
            shift
            ;;
      --level|--level=?*)                       # option
            level=`option_processor $1 $2`
            option_sanitize $level
            shift
            ;;
      --level|--level=?*)                       # option
            level=`option_processor $1 $2`
            option_sanitize $level
            shift
            ;;
      --maxjob|--maxjob=?*)                     # option
            maxjob=`option_processor $1 $2`
            option_sanitize $maxjob
            shift
            ;;
      --maxnode|--maxnode=?*)                   # option
            maxnode=`option_processor $1 $2`
            option_sanitize $maxnode
            shift
            ;;
      --name|--name=?*)                         # option
            name=`option_processor $1 $2`
            option_sanitize $name
            shift
            ;;
      --out-file|--out-file=?*)                 # option
            out_file=`option_processor $1 $2`
            option_sanitize $out_file
            shift
            ;;
      --password|--password=?*)                 # option
            password=`option_processor $1 $2`
            option_sanitize $password
            shift
            ;;
      --pretty|--pretty=?*)                     # option
            pretty=`option_processor $1 $2`
            option_sanitize $pretty
            shift
            ;;
      --python|--python=?*)                     # option
            python=`option_processor $1 $2`
            option_sanitize $python
            shift
            ;;
      --pythonpath|--pythonpath=?*)             # option
            pythonpath=`option_processor $1 $2`
            option_sanitize $pythonpath
            shift
            ;;
      --replay|--replay=?*)                         # option
            replay=`option_processor $1 "$2"`
            option_sanitize "$replay"
            shift
            ;;
      --returncode|--returncode=?*)                         # option
            returncode=`option_processor $1 "$2"`
            option_sanitize "$returncode"
            shift
            ;;
      --skip|--skip=?*)                         # option
            skip=`option_processor $1 "$2"`
            option_sanitize "$skip"
            shift
            ;;
      --test|--test=?*)                         # option
            test=`option_processor $1 $2`
            option_sanitize $test
            shift
            ;;
      --timeout|--timeout=?*)                         # option
            timeout=`option_processor $1 $2`
            option_sanitize $timeout
            shift
            ;;
      --throttle|--throttle=?*)                         # option
            throttle=`option_processor $1 $2`
            option_sanitize $throttle
            shift
            ;;
    #  --tests|--tests=?*)                      # option
    #         tests=`option_processor $1 $2`
    #         option_sanitize $tests
    #         shift
    #         ;;
      --user|--user=?*)                         # option
            user=`option_processor $1 $2`
            option_sanitize $user
            shift
            ;;
      --verbose|--verbose=?*)                   # option
            verbose=`option_processor $1 $2`
            option_sanitize $verbose
            shift
            ;;
      --verbosity|--verbosity=?*)                   # option
            verbosity=`option_processor $1 $2`
            option_sanitize $verbosity
            shift
            ;;
      --version|--version=?*)                   # option
            version=`option_processor $1 $2`
            option_sanitize $version
            shift
            ;;
      --workers|--workers=?*)                   # option
            workers=`option_processor $1 $2`
            option_sanitize $workers
            shift
            ;;
      --volumes|--volumes=?*)                   # option
            volumes=`option_processor $1 $2`
            option_sanitize $volumes
            shift
            ;;
      --zoau|--zoau=?*)                         # option
            zoau=`option_processor $1 $2`
            option_sanitize $zoau
            shift
            ;;
        --)                                     # End Arg parsing
            #shift
            break
            ;;
        -?*)                                    # Warn for invalid but continue parsing for valid
            printf "${YEL}WARN${ENDC}: Unknown option (ignored) for $0: %s\n" "$1" >&2
            shift
            ;;
        *)
            if [ ! "$option_submitted" ]; then
                # Error when no '-' short or long '--' found and exit
                echo "${RED}ERROR${ENDC}: No long or short option has been submitted, use './ac --help to see options."
                exit 1
            fi

            # Nothing left to process, drop down into action processing
            break
    esac
    shift
done

# ==============================================================================
# Action processing
# ==============================================================================

if [ "$option_submitted" ] && [ "$option_submitted" = "--ac-bandit" ] ; then
    ac_bandit $level
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-build" ] ; then
    ac_build
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-galaxy-importer" ] ; then
    ac_galaxy_importer
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-changelog" ] ; then
    ac_changelog $command
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-module-doc" ] ; then
    ac_module_doc
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-install" ] ; then
    ac_install $version
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-lint" ] ; then
    ac_ansible_lint
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-sanity" ] ; then
    ac_sanity $version
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-test" ] ; then
    ac_test ${host:=""} ${python:=""} ${zoau:=""} ${file:=""} ${test:=""} ${debug:=""}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--test-concurrent" ] ; then
    test_concurrent ${host:=""} ${user:=""} ${python:=""} ${zoau:=""} ${pythonpath:=""}\
    ${volumes:="222222,000000"} ${file:="functional/*,unit/*"} "${skip:="test_module_security.py"}"\
    ${itr:="50"} ${replay:="5"} ${timeout:="300"} ${throttle:="True"} ${workers:="1"}\
    ${maxjob:="10"} ${maxnode:="30"} ${bal:="10"} ${verbose:="False"} ${verbosity:="0"}\
    ${debug:="False"} ${extra:="cd `pwd`"} ${returncode:="False"}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-test-config" ] ; then
    ac_test_config
elif [ "$option_submitted" ] && [ "$option_submitted" = "--test-dep-find" ] ; then
    ac_test_dep_finder ${branch:=""} "${skip:="test_module_security.py"}" ${pretty:="true"}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--test-pytest-find" ] ; then
    ac_test_pytest_finder ${file:="functional/*,unit/*"} "${skip:="test_module_security.py"}"\
    ${pretty:="true"}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-version" ] ; then
    ac_version
elif [ "$option_submitted" ] && [ "$option_submitted" = "--file-encrypt" ] ; then
    file_encrypt $file $out_file $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--file-decrypt" ] ; then
    file_decrypt $file $out_file $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-auth" ] ; then
    host_auth $host
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-mount" ] ; then
    host_mount $host
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-mounts" ] ; then
    host_mounts
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-nodes" ] ; then
    host_nodes ${all}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-setup" ] ; then
    venv_setup $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-start" ] ; then
    venv_start $name
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-stop" ] ; then
    venv_stop $name
fi
