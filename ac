#!/bin/sh
# ==============================================================================
# Copyright (c) IBM Corporation 2023
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

# ==============================================================================
# Global Vars
# ==============================================================================

# Note: using the venv.sh script to find the latest venv puts the current 'ac'
# in the scripts directory because venv.sh performs a 'cd $(dirname $0)' and
# then other scripts can't be found in the managed venv corectly. Although this
# is probably a temporary solution, we now take the same code from venv.sh and
# use it here in 'ac' to find the latst managed venv. What should be
# done is to have some meta-data written out to venv/* that this command 'ac'
# can easily find, might be helpful to have some stats like dates created and
# so on.
# VENV=`scripts/./venv.sh --latest_venv`

VENV_HOME_MANAGED=${PWD%/venv}/venv

# Lest normalize the version from 3.10.2 to 3010002000
# Do we we need that 4th octet?
normalize_version() {
    echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
}

latest_venv(){
    dir_version_latest="0"
    test_for_managed_venv=`ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* 2>/dev/null`

    if [ ! -z "$test_for_managed_venv" ]; then
        for dir_version in `ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* | cut -d"-" -f2`; do
            if [ $(normalize_version $dir_version) -ge $(normalize_version $dir_version_latest) ]; then
                dir_version_latest=$dir_version
            fi
        done
        echo "${VENV_HOME_MANAGED}"/"venv-"$dir_version_latest
    fi
}

VENV=`latest_venv`

file=""
verbose=0
DIV="-----------------------------------------------------------------------"
CURRENT_DIR=`pwd`
cd $CURRENT_DIR
# VENV_BIN should equate to same as $VIRTUAL_ENV after the venv activate
if [ ! -z "$VENV" ]; then
    VENV_BIN=$VENV/bin
    VENV_BASENAME=`basename $VENV`
fi

CURR_DIR=`pwd`
RED=$'\e[1;31m'
GRN=$'\e[1;32m'
YEL=$'\e[1;33m'
BLU=$'\e[1;34m'
MAG=$'\e[1;35m'
CYN=$'\e[1;36m'
ENDC=$'\e[0m'
# 0 Docker is up, 1 docker is not up
DOCKER_INFO=`podman info> /dev/null 2>&1;echo $?`

# ==============================================================================
# Arg parsing helpers
# ==============================================================================
terminate() {
    printf '%s\n' "$1" >&2
    exit 1
}

message(){
  echo $DIV;
	echo "$1";
  echo $DIV;
}

ensure_managed_venv_exists(){
    if [ -z "$VENV" ]; then
        echo "Option $1 requires that a managed virtual environment be configured. "\
        "Run $0 -venv-setup to create managed viritual environments. "\
        "For additional optons, use $0 --help."
        exit 1
    fi
}

# ------------------------------------------------------------------------------
# Generate simple formated but incomplete help
# ------------------------------------------------------------------------------
# usage_simple(){
#     script="$0"
#     base_name_script=`basename "$script"`
#     grep '^##' "$script" | sed -e 's/^##//' -e "s/_PROG_/$base_name_script/" 1>&2
# }

# ------------------------------------------------------------------------------
# This method auto generates help based on the comments found in this script.
# ----------------+-------------------------------------------------------------
# Comment style   | Description
# ----------------+-------------------------------------------------------------
# '#->command:'   | `#->` followed by a keyword is the help command displayed
# ----------------+-------------------------------------------------------------
# '## '           | The first found pattern after a help command will be the
#                 | help command description. Subsequent such patterns will be
#                 | right justified and considered options or descriptions
# ----------------+-------------------------------------------------------------
# '# '            | This pattern is ignored and considered script comments
# ----------------+-------------------------------------------------------------
# ------------------------------------------------------------------------------
#->help:
## Print help message (-h, -? produce short version, otherwise verbose)
## Usage: ac [-h, -?, --help]
## Example:
##  $ ac --help
help(){
    if [ "$1" = "verbose" ]; then
        awk '{\
                if (($0 ~ /^#->[a-zA-Z\-\_0-9.]+:/)) { \
                    helpCommand = substr($0, 4, index($0, ":")); \
                    helpMessage ="";\
                } else if ($0 ~ /^##/) { \
                    if (helpMessage) { \
                        helpMessage ="                 "substr($0, 3); \
                    } else { \
                        helpMessage = substr($0, 3); \
                    } \
                    if (helpCommand && helpMessage) {\
                        printf "\033[36m%-16s\033[0m %s\n", helpCommand, helpMessage; \
                        helpCommand =""; \
                        commandContext="                  Supports format: <option> <value> and <option>=<value>";\
                        print commandContext;\
                    } else {\
                        print helpMessage
                    }
                }
            }' $0
    else
        awk '{\
            if (($0 ~ /^#->[a-zA-Z\-\_0-9.]+:/)) { \
                helpCommand = substr($0, 4, index($0, ":")); \
                helpMessage ="";\
            } else if ($0 ~ /^##[[:space:]][[:space:]]*\$[[:space:]]ac/) { \
					helpMessage = substr($0, 3); \
                if (helpCommand && helpMessage) {\
                   printf "\033[36m%-16s\033[0m %s\n", helpCommand, helpMessage; \
                   helpCommand =""; \
                } else {\
                    helpMessage="                 "substr($0, 3); \
                    print helpMessage
                }
            }
        }' $0
    fi
}

# The case stmt sees it this way:
# --foo abc ---> $1 = foo, $2 = abc
# --foo=abc ---> $1 = --foo=abc
option_processor(){

    opt=$1
    arg=$2
    if [ "$arg" ]; then
       echo $arg
    elif [ "$opt" ]; then
        # Split up to "=" and set the remainder
        value=${opt#*=}
        # If the value is not the same as the option ($1),then assign it        .
        if [ "$opt" != "$value" ]; then
            echo $value
        else
            # Don't echo, will return from the function, send to error msg to stderr
            ERROR_MSG="${RED}ERROR${ENDC}: option $option requires a non-empty argument."
            printf '%s\n' "$ERROR_MSG" >&2
            echo "exit 1"
        fi
    fi
}

# If option_processor echo's an exit , the sanitize will execute it else it will
# just be a echo, might be worth seeing if this can just be called or embedded
# into the option_processor to simplify the calls
option_sanitize(){
    option_value=$1
    $option_value 2> /dev/null
}

# ==============================================================================
# Commands
# ==============================================================================

# ------------------------------------------------------------------------------
# Run a bandit security scan on the plugin directory
# ------------------------------------------------------------------------------
#->ac-bandit:
## Run a bandit security scan on the plugins directory, set the severity level.
## Usage: ac [--bandit <level>]
## Usage: ac [--bandit <level>]
## <level> - choose from 'l', 'll', 'lll'
##         - l all low, medium, high severity
##         - ll all medium, high severity
##         - lll all high severity
## Example:
##  $ ac --ac-bandit --level ll
##  $ ac --ac-bandit
ac_bandit(){
    option_level=$1
    if [ ! "$option_level" ]; then
        option_level="ll"
    fi
    message "Running Bandit scan with level '$option_level'"
    . $VENV_BIN/activate && python3 -m bandit -r plugins/* -"${option_level}"
}

# ------------------------------------------------------------------------------
# Build and install collection of the local GH branch.
# To not dirty the host, consider installing in the venv:
# ansible-galaxy -vv collection install --force -p venv/lib/python3.8/site-packages/ansible_collections
# ------------------------------------------------------------------------------
#->ac-build:
## Build and install collection of the local GH branch.
## Usage: ac [--ac-build]
## Example:
##  $ ac --ac-build
ac_build(){
    gh_branch=`git branch |grep "*" | cut -d" " -f2`
    message "Build and install collection of the local GH branch: '$gh_branch'."
    . $VENV_BIN/activate && rm -rf ibm-ibm_zos_core-*.tar.gz && \
		$VENV_BIN/ansible-galaxy collection build && \
			$VENV_BIN/ansible-galaxy collection install -f ibm-ibm_zos_core-*
}

# ------------------------------------------------------------------------------
# Install an ibm_zos_core collection from galaxy (or how you have ansible.cfg configured)
# ------------------------------------------------------------------------------
#->ac-install:
## Install collection 'ibm_zos_core' from a repository such as Galaxy. If no
## version is specified, latest GA level in repository will be installed.
## Usage: ac [--ac-install] [--version <version>]
## Options:
##  version - The collection version
## Example:
##  $ ac --ac-install --version 1.5.0-beta.1
##  $ ac --ac-install
ac_install(){
    option_version=$1

    if [ "$option_version" ];then
        message "Installing 'ibm.ibm_zos_core' collection version=${option_version}."
        . $VENV_BIN/activate && $VENV_BIN/ansible-galaxy collection install -fc ibm.ibm_zos_core:${option_version}
    else
        message "Installing 'ibm.ibm_zos_core' lastet GA version."
        . $VENV_BIN/activate && $VENV_BIN/ansible-galaxy collection install -fc ibm.ibm_zos_core
    fi
}

# ------------------------------------------------------------------------------
# Run ansible-lint on the locally checked out GH Branch
# ------------------------------------------------------------------------------
#->ac-lint:
## Run ansible-lint on the local GH branch with the production profile.
## Usage: ac [--ac-lint]
## Example:
##  $ ac --ac-lint
ac_ansible_lint(){
    gh_branch=`git branch |grep "*" | cut -d" " -f2`
    message "Linting with ansible-lint on GH branch: '$gh_branch'."
    . $VENV_BIN/activate && $VENV_BIN/ansible-lint --profile production
}

# ------------------------------------------------------------------------------
# Run the sanity test using docker given python version else default to venv
# ------------------------------------------------------------------------------
#->ac-sanity:
## Run ansible-test in docker if the docker engine is running, else run them in
## a managed virtual environment using the installed python version.
## Usage: ac [--ac-sanity] [--version <version>]
## Options:
##   <version> - Only applies to when docker is running.
##             - No version selection will run all available python versions in docker.
##             - choose from '2.6', '2.7', '3.5', '3.6', '3.7', '3.8', '3.9', ....
## Example:
##  $ ac --ac-sanity
##  $ ac --ac-sanity --version 3.10
ac_sanity(){
    option_version=$1
    if [ "${DOCKER_INFO}" == "0" ]; then
        if [ "${option_version}" ]; then
            message "Running ansible-test with docker container and python version ${option_version}."
            . $VENV_BIN/activate && export ANSIBLE_TEST_PREFER_PODMAN=1 && cd ~/.ansible/collections/ansible_collections/ibm/ibm_zos_core && \
                 ${VENV_BIN}/ansible-test sanity --python ${option_version} --requirements --docker default && \
                    cd ${CURR_DIR};
        else
            message "Running ansible-test with docker container and all python versions."
            . $VENV_BIN/activate && export ANSIBLE_TEST_PREFER_PODMAN=1 && cd ~/.ansible/collections/ansible_collections/ibm/ibm_zos_core && \
                ${VENV_BIN}/ansible-test sanity --requirements --docker default && \
                    cd ${CURR_DIR};
        fi
    else
        if [ "${option_version}" ]; then
            message "Docker engine is not running, version ${option_version} will be ignored."
        fi

        . $VENV_BIN/activate && VENV_PY_VER=`python3 --version | cut -d" " -f2 | cut -d"." -f1,2`
        message "Running ansible-test with managed python virtual environment: ${VENV}."
		. $VENV_BIN/activate && cd ~/.ansible/collections/ansible_collections/ibm/ibm_zos_core && \
			${VENV_BIN}/ansible-test sanity --python ${VENV_PY_VER} --requirements && \
				cd ${CURR_DIR};
    fi
}

# ------------------------------------------------------------------------------
# Run functional tests:
# ------------------------------------------------------------------------------
#->ac-test:
## Run the functional tests inside the managed python virtual environment.
## Usage: ac [--ac-test] [--host <host>] [--python <python>] [--zoau <zoau>] [--file <file>] [--debug <boolean>]
## Options:
##     host     - z/OS managed node to run test cases, no selection defaults to
##                a host registerd to your user id (`whoami`).
##     python   - IBM enterprise python version, choices are 3.8, 3.9, 3.10, 3.11,
##                no selection defauls to 3.8.
##     zoau     - ZOAU to use in testing, choices are 1.0.3, 1.1.1, 1.2.0, 1.2.1,
##                no selection defaults to 1.1.1 .
##     file     - the absoulte path to a test suite to run, no selection
##                defaults to all test suite running.
##     test     - a test case to run found in 'file', no selection
##                defaults to all tests in file running.
##     debug    - enable debug for pytest (-s), choices are true and false
## Example:
##  $ ac --ac-test --host ec01150a --python 3.10 --zoau 1.2.2 --file tests/functional/modules/test_zos_operator_func.py --test  test_zos_operator_positive_path --debug true
##  $ ac --ac-test --host ec33012a --python 3.10 --zoau 1.2.2 --file tests/functional/modules/test_zos_operator_func.py --debug true
##  $ ac --ac-test --file tests/functional/modules/test_zos_operator_func.py --debug true
##  $ ac --ac-test
ac_test(){
    host=$1
    python=$2
    zoau=$3
    file=$4
    test=$5
    debug=$6

    # Run test by node IDs, eg pytest -v tests/my-directory/test_demo.py::test_specific_function
    if [ "$file" ] && [ "$test" ]; then
        file="${file}::${test}"
    fi

    if [ "$debug" ]; then
        debug="-s"
    fi

    skip=$CURR_DIR/tests/functional/modules/test_module_security.py

    # Create the config always overwriting existing
    ${VENV}/./venv.sh --config ${host} ${python} ${zoau} ${VENV}

	# Check configuration was created in venv/config.yml, else error and exit
	if test ! -e  ${VENV}/config.yml; then
	    echo "No configuration was able to be created in ${VENV}/config.yml "
		exit 1
	fi

    #cd ${VENV_BIN}

    if [ "$file" ]; then
        . ${VENV_BIN}/activate && ${VENV_BIN}/pytest --ignore="${skip}" $CURR_DIR/${file} --host-pattern=all --zinventory=${VENV}/config.yml "${debug}"
    else
        for file in `ls tests/functional/modules/*.py`; do
            # For some reason '--ignore not being honored so injecting a work around
            if [ "$file" != "$skip" ]; then
                . ${VENV_BIN}/activate && ${VENV_BIN}/pytest --ignore="${skip}" $CURR_DIR/${file} --host-pattern=all --zinventory=${VENV}/config.yml "${debug}"
            fi
        done
    fi

    # Clean up the collections folder after running the tests, temporary work around.
    rm -rf collections/ansible_collections

    #cd ${CURR_DIR}
}

# ------------------------------------------------------------------------------
# Print the configuration used to connect to the managed node for functional tests
# ------------------------------------------------------------------------------
#->ac-test-config:
## Disply the contents of configuration file used to run functional tests.
## Usage: ac [--ac-test-config]
## Example:
##  $ ac --ac-test-config
ac_test_config(){
	if [ -f "${VENV}/config.yml" ]; then
        message "Print test configuration used for functional testing."
	    cat ${VENV}/config.yml;
	else
        message "No configuration was found, run '--ac-test' to generate a configuration."
	fi
}

# ------------------------------------------------------------------------------
# Check the version of the ibm_zos_core collection installed
# ------------------------------------------------------------------------------
#->ac-version:
## Obtain the version of the collection installed on the controller.
## Usage: ac [--ac-version]
## Example:
##  $ ac --ac-version
ac_version(){
    message "Ansible collection version installed on this controller."
    cat ~/.ansible/collections/ansible_collections/ibm/ibm_zos_core/MANIFEST.json \
    | grep version|cut -d ':' -f 2 | sed 's/,*$//g' | tr -d '"';
}

# ------------------------------------------------------------------------------
# Encrypt a file, it the users responsiblity to remove the uncrypted file
# afterwards, also ensure it does not end up in a public rep such that it is
# in .gitignore
# Consider adding salt
# # encrypt file.txt to file.enc using 256-bit AES in CBC mode
# openssl enc -aes-256-cbc -salt -in file.txt -out file.enc
# the same, only the output is base64 encoded for, e.g., e-mail
# openssl enc -aes-256-cbc -a -salt -in file.txt -out file.enc
# decrypt binary file.enc
# openssl enc -d -aes-256-cbc -in file.enc -out file.txt
# decrypt base64-encoded version
# openssl enc -d -aes-256-cbc -a -in file.enc -out file.txt
# ------------------------------------------------------------------------------
#->file-encrypt:
## Encrypt a file as a new file
## Usage: ac [--file-encrypt --file <file> --out-file <file> --password <password>]
## Options:
##     file     - the file to encrypt.
##     out-file - the encrypted output.
##     password - the key (password) used to encrypt the file.
## Example:
##  $ ac --file-encrypt --file some.txt --out-file some.txt.axx --password 12345678
file_encrypt(){
    option_file=$1
    option_out_file=$2
    option_pass=$3

    if [ ! "$option_file" ] || [ ! "$option_out_file" ] || [ ! "$option_pass" ]; then
        message "Unable to encrpyt file, missing option values."
        exit 1
    fi
    message "Encrypting file $option_file as file $option_out_file."
    touch $option_out_file
    chmod 700 $option_out_file
    echo "${option_pass}" | openssl enc -aes-256-cbc -a -salt -in $option_file -out $option_out_file -pass stdin
	#echo "${option_pass}" | openssl bf -a -in $option_file -out $option_out_file -pass stdin
}

# ------------------------------------------------------------------------------
# decrypt a file, it the users responsiblity to remove the uncrypted file
# afterwards, also ensure it does not end up in a public rep such that it is
# in .gitignore
# ------------------------------------------------------------------------------
#->file-decrypt:
## Decrypt a file as a new file and apply file permissions 700, RWX only to the owner.
## Usage: ac [--file-decrypt --file <file> --out-file <out-file> --password <password>]
## Options:
##     file     - the file to decrypt.
##     out-file - the decrypted output
##     password - the key (password) used when encrypting the file.
## Example:
##  $ ac --file-decrypt --file some.txt.axx --out-file some.txt --password 12345678
file_decrypt(){
    option_file=$1
    option_out_file=$2
    option_pass=$3
    if [ ! "$option_file" ] || [ ! "$option_out_file" ] || [ ! "$option_pass" ]; then
        message "Unable to decrpyt file, missing option values."
        exit 1
    fi
    message "Decrypting the file ${option_file} as ${option_out_file}."
	#echo "${option_pass}" | openssl bf -d -a -in $option_file -out $option_out_file -pass stdin
    echo "${option_pass}" | openssl enc -d -aes-256-cbc -a -in $option_file -out $option_out_file -pass stdin
    chmod 700 $option_out_file
}


# Cleanup and remove geneated doc for the collection if its not going to be
# checked in
# Example:
#     $ make cleanDoc
clean(){
    echo Todo
    # @. $(VENV_BIN)/activate && make -C docs clean
}

clean_doc(){
    echo Todo
    # cleanDoc
	# @. $(VENV_BIN)/activate && make -C docs clean
}

#->host-auth:
## Copy your ssh key to a `host` or the default which is your username.
## Usage: ac [--host-auth] [--host <host>]
## Options:
##     host     - z/OS managed node, no selection defaults to
##                a host registerd to your user id (`whoami`).
## Example:
##  $ ac --host-auth --host ec33012a
host_auth(){
    option_host=$1
    if [ ! "$option_host" ]; then
        host=`whoami`
    fi
    message "Copy SSH keys to the managed node $option_host"
    $VENV/./venv.sh --cert $option_host
}

# ------------------------------------------------------------------------------
# Copy mount & profile scripts to users home directory on the target and execute
# mount script. Should automatically authenticate your ssh key.
# ------------------------------------------------------------------------------
#->host-mount:
## Copy mount and profile scripts in users home directory and excute the mount.
## Usage: ac [--host-mount --host <host>]
## Options:
##     host     - z/OS managed node id, no selection defaults to
##                a host registerd to your user id (`whoami`).
## Example:
##  $ ac --host-mount --host ec33012a
host_mount(){
    option_host=$1
    if [ ! "$option_host" ]; then
        option_host=`whoami`
    fi
    host_auth $option_host
    message "Copying mount.env, mount.sh, profile.sh scripts to host $option_host and then mounting shared drive."
    #$VENV/./hosts.sh --cert $1
    $VENV/./venv.sh --host-setup-files $option_host $VENV/"mounts.env" $VENV/"mounts.sh" $VENV/"profile.sh"
    #$VENV/./hosts.sh --mount $1 $VENV/"mounts.env" $VENV/"mounts.sh" $VENV/"shell-helper.sh" $VENV/"profile.sh"
}

# ------------------------------------------------------------------------------
# Print the mount table contents
# ------------------------------------------------------------------------------
#->host-mounts:
## Print the ZOAU and Python mount tables used by this utility.
## Usage: ac [--host-mounts]
## Example:
##  $ ac --host-mounts
host_mounts(){
    message "Print mount tables used by the $0 utility"
    $VENV/mounts.sh --print-mount-tables
}

# ------------------------------------------------------------------------------
# Print the managed z/OS node IDs
# ------------------------------------------------------------------------------
#->host-nodes:
## Display the z/OS managed node IDs.
## Usage: ac [--host-nodes]
## Example:
##  $ ac --host-nodes
host_nodes(){
    message "Print local managed node IDs."
    $VENV/venv.sh --targets
}

# ------------------------------------------------------------------------------
# This is the only script that has to be relativly executed from (scripts/)
# because at this point, no managed venv exists.
# TODO: Support -force to replace/update and possible BYO reqs file
# ------------------------------------------------------------------------------
#->venv-setup:
## Create managed virtual environments using the latest (discovred) python3.
## If the password option is not provided, the info.env.axx file will not be
## associated to the managed venv's, thus you will see messages asking you to
## export some variables such as USER, HOST_SUFFIX, etc. Choosing not to use
## the 'password' option should only an option when the utility can not decrypt.
## Usage: ac [--venv-setup] [--password 123456]
## Example:
##  $ ac --venv-setup --passsword 123456
##  $ ac --venv-setup
venv_setup(){
    option_pass=$1
    message "Create managed virtual environments based on hosts latest python3."
    scripts/./venv.sh --vsetup --password $option_pass
}

# ------------------------------------------------------------------------------
# Allows you to activate the lastet ansible managed virtual enviroments
# TODO: Allow user to specify which venv they can start
# ------------------------------------------------------------------------------
#->venv-start:
## Activate the lastest ansible managed virtual environment.
## Usage: ac [--venv-start]
## Example:
##  $ ac --venv-start
venv_start(){
    message "Starting managed python virtual environment: $VENV_BASENAME"
    #. $VENV_BIN/activate; exec /bin/sh -i
    /bin/bash -c ". $VENV_BIN/activate; exec /bin/sh -i"
}

# ------------------------------------------------------------------------------
# Allows you to deactivate the lastet ansible managed virtual enviroments
# TODO: Allow user to specify which venv they can stop
# ------------------------------------------------------------------------------
#->venv-stop:
## Deactivate the lastest ansible managed virtual environment.
## Usage: ac [--venv-stop]
## Example:
##  $ ac --venv-stop
venv_stop(){
    message "Stopping managed ansible virtual environment located at: $VENV_BASENAME"
    message "ac --venv-stop does not actually currently work, use CNTL-D"
    . deactivate $VENV_BASENAME;
}

# ==============================================================================
# Main arg parsing
# ==============================================================================
while true; do
    option=$1
    if [ "$option" ]; then
        # Check that we see a '-' or '--' in all options, else error and exit.
        test_long_input=`echo "$option" | grep "^--?*"`
        test_short_input=`echo "$option" | grep "^-?*"`
        if [ ! "$test_short_input" ] && [ ! "$test_long_input" ]; then
            echo "Please use valid syntax for option $option, it appears to be missing '-' or '--'."
            exit 1
        fi
    fi

    case $1 in
      -h|-\?|--help)
        if [ "$1" = "-h" ] || [ "$1" = "-?" ]; then
            help
        else
            help "verbose"
        fi
         exit
         ;;
      --ac-bandit)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-bandit"
            ;;
      --ac-build)                              # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-build"
            ;;
      --ac-install)
            ensure_managed_venv_exists $1      # Command
            option_submitted="--ac-install"
            ;;
      --ac-lint)
            ensure_managed_venv_exists $1      # Command
            option_submitted="--ac-lint"
            ;;
      --ac-sanity |--ac-sanity=?*)             # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-sanity"
            ;;
      --ac-test|--ac-test=?*)                   # command
            ensure_managed_venv_exists $1
            option_submitted="--ac-test"
            ;;
      --ac-test-config|--ac-test-config=?*)     # command
            ensure_managed_venv_exists $1
            option_submitted="--ac-test-config"
            ;;
      --ac-version)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-version"
            ;;
      --file-encrypt)                           # Command
            ensure_managed_venv_exists $1
            option_submitted="--file-encrypt"
            ;;
      --file-decrypt)                           # Command
            ensure_managed_venv_exists $1
            option_submitted="--file-decrypt"
            ;;
      --host-auth|--host-auth=?*)               # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-auth"
            ;;
      --host-config)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-config"
            ;;
      --host-mount|--host-mount=?*)             # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-mount"
            ;;
      --host-mounts)
            ensure_managed_venv_exists $1       # Command
            option_submitted="--host-mounts"
            ;;
      --host-nodes)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-nodes"
            ;;
      --venv-setup)                             # Command
            option_submitted="--venv-setup"
            ;;
      --venv-start)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--venv-start"
            ;;
      --venv-stop)                              # Command
            ensure_managed_venv_exists $1
            option_submitted="--venv-stop"
            ;;
      --debug|--debug=?*)                       # option
            debug=`option_processor $1 $2`
            option_sanitize $debug
            shift
            ;;
      --file|--file=?*)                         # option
            file=`option_processor $1 $2`
            option_sanitize $file
            shift
            ;;
      --host|--host=?*)                          # option
            host=`option_processor $1 $2`
            option_sanitize $host
            shift
            ;;
      --level|--level=?*)                       # option
            level=`option_processor $1 $2`
            option_sanitize $level
            shift
            ;;
      --out-file|--out-file=?*)                 # option
            out_file=`option_processor $1 $2`
            option_sanitize $out_file
            shift
            ;;
      --password|--password=?*)                 # option
            password=`option_processor $1 $2`
            option_sanitize $password
            shift
            ;;
      --python|--python=?*)                     # option
            python=`option_processor $1 $2`
            option_sanitize $python
            shift
            ;;
      --test|--test=?*)                         # option
            test=`option_processor $1 $2`
            option_sanitize $test
            shift
            ;;
    #   --tests|--tests=?*)                       # option
    #         tests=`option_processor $1 $2`
    #         option_sanitize $tests
    #         shift
    #         ;;
      --version|--version=?*)                   # option
            version=`option_processor $1 $2`
            option_sanitize $version
            shift
            ;;
      --zoau|--zoau=?*)                         # option
            zoau=`option_processor $1 $2`
            option_sanitize $zoau
            shift
            ;;
        --)                                     # End Arg parsing
            #shift
            break
            ;;
        -?*)                                    # Warn for invalid but continue parsing for valid
            printf "${YEL}WARN${ENDC}: Unknown option (ignored) for $0: %s\n" "$1" >&2
            shift
            ;;
        *)
            if [ ! "$option_submitted" ]; then
                # Error when no '-' short or long '--' found and exit
                echo "${RED}ERROR${ENDC}: No long or short option has been submitted, use './ac --help to see options."
                exit 1
            fi

            # Nothing left to process, drop down into action processing
            break
    esac
    shift
done

# ==============================================================================
# Action processing
# ==============================================================================

if [ "$option_submitted" ] && [ "$option_submitted" = "--ac-bandit" ] ; then
    ac_bandit $level
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-build" ] ; then
    ac_build
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-install" ] ; then
    ac_install $version
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-lint" ] ; then
    ac_ansible_lint
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-sanity" ] ; then
    ac_sanity $version
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-test" ] ; then
    ac_test ${host:=""} ${python:=""} ${zoau:=""} ${file:=""} ${test:=""} ${debug:=""}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-test-config" ] ; then
    ac_test_config
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-version" ] ; then
    ac_version
elif [ "$option_submitted" ] && [ "$option_submitted" = "--file-encrypt" ] ; then
    file_encrypt $file $out_file $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--file-decrypt" ] ; then
    file_decrypt $file $out_file $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-auth" ] ; then
    host_auth $host
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-mount" ] ; then
    host_mount $host
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-mounts" ] ; then
    host_mounts
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-nodes" ] ; then
    host_nodes
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-setup" ] ; then
    venv_setup $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-start" ] ; then
    venv_start
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-stop" ] ; then
    venv_stop
fi
