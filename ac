#!/bin/bash
# ==============================================================================
# Copyright (c) IBM Corporation 2024
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

# ==============================================================================
# Global Vars and helpers
# ==============================================================================

# TODO:  - write stats to the venv such as date created, updated, etc

# Trap custom exit value to exit child processes.
trap "exit 100" TERM
export PARENT_PID=$$

VENV_HOME_MANAGED=${PWD%/venv}/venv

# ------------------------------------------------------------------------------
# This method will terminate the entire script by killing the parent process.
# When exiting from within a function, use exit_all' not 'exit n' else the parent
# proccess will not exit.
# ------------------------------------------------------------------------------
function exit_all(){
   kill -s TERM $PARENT_PID
}

# Normalize the version from 3.10.2 to 3010002000
normalize_version() {
    echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
}

# Method determines the lastest (highest number) version venv that is managed by ./ac
latest_venv(){
    dir_version_latest="0"
    test_for_managed_venv=`ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* 2>/dev/null`

    if [ ! -z "$test_for_managed_venv" ]; then
        for dir_version in `ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* | cut -d"-" -f2`; do
            if [ $(normalize_version $dir_version) -ge $(normalize_version $dir_version_latest) ]; then
                dir_version_latest=$dir_version
            fi
        done
        echo "${VENV_HOME_MANAGED}"/"venv-"$dir_version_latest
    fi
}

# Method will take a venv name such as venv-2.16 and validate that it exists, otherwise error and exit
validate_venv(){
    option_venv=$1

    if [[ "$option_venv" =~ "latest" ]]; then
        test_for_managed_venv=`ls -d "$VENV_HOME_MANAGED"/venv-latest* 2>/dev/null`
        if [[ "$test_for_managed_venv" =~ "latest" ]]; then
            dir_version_latest=$option_venv
        fi
    elif [[ "$option_venv" =~ "doc" ]]; then
        test_for_managed_venv=`ls -d "$VENV_HOME_MANAGED"/venv-doc* 2>/dev/null`
        if [[ "$test_for_managed_venv" =~ "doc" ]]; then
            dir_version_latest=$option_venv
        fi
    else
        for dir_version in `ls -d "$VENV_HOME_MANAGED"/venv-[0-9].[0-9]* | rev | cut -d"/" -f1| rev`; do
            if [ $dir_version == $option_venv ]; then
                dir_version_latest=$dir_version
            fi
        done
    fi

    if [ ! -z "$dir_version_latest" ]; then
        echo "${VENV_HOME_MANAGED}"/$dir_version_latest
    else
        message_error "Unable to validate managed venv option $option_venv, exiting."
        exit
    fi
}

# TODO: Wrap this with an exist check so that you can override the venv from the shell
VENV=`latest_venv`

if [ ! -z "$VENV" ]; then
    VENV_BIN=$VENV/bin
    VENV_BASENAME=`basename $VENV`
fi

CURRENT_DIR=`pwd`
cd $CURRENT_DIR
CURR_DIR=`pwd`
file=""
verbose=0
GH_BRANCH=`git branch |grep "*" | cut -d" " -f2`
DIV="-----------------------------------------------------------------------"

# if '0' then Docker is up, else '1' then docker is not up
DOCKER_INFO=`podman info> /dev/null 2>&1;echo $?`

# Vars used to aid in terminal message colors
RED=$'\e[1;31m'
GRN=$'\e[1;32m'
YEL=$'\e[1;33m'
BLU=$'\e[1;34m'
MAG=$'\e[1;35m'
CYN=$'\e[1;36m'
ENDC=$'\e[0m'

# ==============================================================================
# Arg parsing helpers
# ==============================================================================

# ------------------------------------------------------------------------------
# This method generates an INFO message with green color and dividers. This
# message will always be sent to STDERR so that STDOUT can be reserved for
# return codes.. Use this method for messages to the console.
# ------------------------------------------------------------------------------
message(){
    printf '%s\n' "" >&2
    printf '%s\n' "${GRN}${DIV}${ENDC}" >&2
    printf '%s\n' "${GRN}INFO:${ENDC} ${1}" >&2
    printf '%s\n' "${GRN}${DIV}${ENDC}" >&2
}

# ------------------------------------------------------------------------------
# This method generates an ERROR message with red color. This message
# will always be sent to STDERR so that STDOUT can be reserved for return codes.
# Use this method for error messages to the console.
# ------------------------------------------------------------------------------
message_error(){
    printf '%s\n' "" >&2
    printf '%s\n' "${RED}${DIV}${RED}" >&2
    printf '%s\n' "${RED}ERROR:${ENDC} ${1}" >&2
    printf '%s\n' "${RED}${DIV}${ENDC}" >&2
    exit_all
}

# ------------------------------------------------------------------------------
# This method generates an WARN message with yellow color. This message
# will always be sent to STDERR so that STDOUT can be reserved for return codes.
# Use this method for error messages to the console.
# ------------------------------------------------------------------------------
message_warn(){
    printf '%s\n' "" >&2
    printf '%s\n' "${YEL}${DIV}${YEL}" >&2
    printf '%s\n' "${YEL}WARN:${ENDC} ${1}" >&2
    printf '%s\n' "${YEL}${DIV}${YEL}" >&2
}

# ------------------------------------------------------------------------------
# This method ehcecks to see the VENV variable has been set, if not it produces
# an error message with instructions on how to correct it.
# ------------------------------------------------------------------------------
ensure_managed_venv_exists(){
    if [ -z "$VENV" ]; then
        message_error "Option $1 requires that a managed virtual environment be configured.
       Run $0 -venv-setup to create managed viritual environments.
       For additional optons, use $0 --help."
        exit_all
    fi
}

terminate() {
    printf '%s\n' "$1" >&2
    exit 1
}

# ------------------------------------------------------------------------------
# Generate simple formated but incomplete help
# ------------------------------------------------------------------------------
# usage_simple(){
#     script="$0"
#     base_name_script=`basename "$script"`
#     grep '^##' "$script" | sed -e 's/^##//' -e "s/_PROG_/$base_name_script/" 1>&2
# }

# ------------------------------------------------------------------------------
# This method auto generates help based on the comments found in this script.
# ----------------+-------------------------------------------------------------
# Comment style   | Description
# ----------------+-------------------------------------------------------------
# '#->command:'   | `#->` followed by a keyword is the help command displayed
# ----------------+-------------------------------------------------------------
# '## '           | The first found pattern after a help command will be the
#                 | help command description. Subsequent such patterns will be
#                 | right justified and considered options or descriptions
# ----------------+-------------------------------------------------------------
# '# '            | This pattern is ignored and considered script comments
# ----------------+-------------------------------------------------------------
# ------------------------------------------------------------------------------
#->help:
## Print help message (-h, -? produce short version, otherwise verbose)
## Usage: ac [-h, -?, --help]
## Example:
##  $ ac --help
help(){
    if [ "$1" = "verbose" ]; then
        awk '{\
                if (($0 ~ /^#->[a-zA-Z\-\_0-9.]+:/)) { \
                    helpCommand = substr($0, 4, index($0, ":")); \
                    helpMessage ="";\
                } else if ($0 ~ /^##/) { \
                    if (helpMessage) { \
                        helpMessage ="                 "substr($0, 3); \
                    } else { \
                        helpMessage = substr($0, 3); \
                    } \
                    if (helpCommand && helpMessage) {\
                        printf "\033[36m%-16s\033[0m %s\n", helpCommand, helpMessage; \
                        helpCommand =""; \
                        commandContext="                  Supports format: <option> <value> and <option>=<value>";\
                        print commandContext;\
                    } else {\
                        print helpMessage
                    }
                }
            }' $0
    else
        awk '{\
            if (($0 ~ /^#->[a-zA-Z\-\_0-9.]+:/)) { \
                helpCommand = substr($0, 4, index($0, ":")); \
                helpMessage ="";\
            } else if ($0 ~ /^##[[:space:]][[:space:]]*\$[[:space:]]ac/) { \
					helpMessage = substr($0, 3); \
                if (helpCommand && helpMessage) {\
                   printf "\033[36m%-16s\033[0m %s\n", helpCommand, helpMessage; \
                   helpCommand =""; \
                } else {\
                    helpMessage="                 "substr($0, 3); \
                    print helpMessage
                }
            } else if ($0 ~ /^##[[:space:]][[:space:]]*\$[[:space:]]*--/) { \
					helpMessage = substr($0, 3); \
                if (helpCommand && helpMessage) {\
                   printf "\033[36m%-16s\033[0m %s\n", helpCommand, helpMessage; \
                   helpCommand =""; \
                } else {\
                    helpMessage="                    "substr($0, 6); \
                    print helpMessage
                }
            }
        }' $0
    fi
}

# The case stmt sees it this way:
# --foo abc ---> $1 = foo, $2 = abc
# --foo=abc ---> $1 = --foo=abc
option_processor(){

    opt=$1
    arg=$2
    if [ "$arg" ]; then
       echo "$arg"
    elif [ "$opt" ]; then
        # Split up to "=" and set the remainder
        value=${opt#*=}
        # If the value is not the same as the option ($1),then assign it        .
        if [ "$opt" != "$value" ]; then
            echo $value
        else
            # Don't echo, will return from the function, send to error msg to stderr
            ERROR_MSG="${RED}ERROR${ENDC}: option $option requires a non-empty argument."
            printf '%s\n' "$ERROR_MSG" >&2
            echo "exit 1"
        fi
    fi
}

# If option_processor echo's an exit , the sanitize will execute it else it will
# just be a echo, might be worth seeing if this can just be called or embedded
# into the option_processor to simplify the calls
option_sanitize(){
    option_value=$1
    $option_value 2> /dev/null
}

# ==============================================================================
# Commands
# ==============================================================================

# ------------------------------------------------------------------------------
# Run a bandit static scan on the plugins directory on the hosts local branch
# where the 'ac' is running.
# ------------------------------------------------------------------------------
#->ac-bandit:
## Run bandit static scan on the plugins directory on the local GH branch.
## Usage: ac --ac-bandit [--level <str>]
## Options:
##     level (optional):
##         - choose from 'l', 'll', 'lll'
##         - Defaults to, 'l'
##         - l, all low, medium, high severities
##         - ll, all medium, high severities
##         - lllm all high severities
## Example:
##  $ ac --ac-bandit --level ll
##  $ ac --ac-bandit
ac_bandit(){
    option_level=$1
    if [ ! "$option_level" ]; then
        option_level="l"
    fi
    message "Running Bandit scan with level '$option_level'"
    . $VENV_BIN/activate && python3 -m bandit -r plugins/* -"${option_level}"
}

# ------------------------------------------------------------------------------
# Build and install a collection of the local branch checked out where 'ac' is
# running. Installation is set the --name option, local host or venv.
# ------------------------------------------------------------------------------
#->ac-build:
## Build and install collection of the local GH branch, select installation path.
## Usage: ac --ac-build [--name <str>]
## Options:
##      name (optional)
##          - The location to install, by default it will install the collection
##            in the latest venv. If value 'local' is set, it will
##            install the collection on the host.
## Example:
##  $ ac --ac-build --name local
##  $ ac --ac-build --name venv-2.14
##  $ ac --ac-build
ac_build(){
    option_name=$1
    galaxy_path=""  # Empty installs to host default
    git_init=""
    base_name=""

    # There must be a parent git directory in non-default collection installations, see issues
    # https://github.com/ansible/ansible/issues/68499#issuecomment-873660057
    # https://github.com/ansible/ansible/issues/63032
    # Work around is to perform a git init . and create an empty repo where the collection is installed,
    # does not seem to to be an issue with the host installation thus far, only venv's. This is required
    # for ansible-test sanity tests to run, else sanity fails with 'WARNING: All targets skipped.'

    if [ "$option_name" ]; then
        if [ "$option_name" == "local" ];then
            base_name="$HOME/.ansible/collections/ansible_collections"
        else
            VENV=`validate_venv $option_name`
            galaxy_path="-p ${VENV}"
            base_name=`basename $VENV`
            git_init="git init ${VENV}/ansible_collections --quiet"
        fi
    else
        galaxy_path="-p ${VENV}"
        base_name=`basename $VENV`
        git_init="git init ${VENV}/ansible_collections --quiet"
    fi

    message "Creating 'ibm_zos_core' collection from the local GH branch: '$GH_BRANCH'."
    . $VENV_BIN/activate && rm -rf ibm-ibm_zos_core-*.tar.gz && \
		$VENV_BIN/ansible-galaxy collection build

    message "Installing 'ibm.ibm_zos_core' collection to ${base_name}."
    . $VENV_BIN/activate && $VENV_BIN/ansible-galaxy collection install -f ibm-ibm_zos_core-* ${galaxy_path} && ${git_init}
}

# ------------------------------------------------------------------------------
# Build, install and validate the collection with 'galaxy importer'. This operation
# is performed on the host, not on a venv.
# ------------------------------------------------------------------------------
#->ac-galaxy-importer:
## Build current branch and run galaxy importer on the collection.
## Usage: ac --ac-galaxy-importer
## Example:
##  $ ac --ac-galaxy-importer
ac_galaxy_importer(){
    # Extract the pytest ignore errors from `$VENV/galaxy-importer.cfg` and trim all white space
    FLAKE8_IGNORE=`cat $VENV/galaxy-importer.cfg| grep -i "ignore = " | cut -d "=" -f 2 | tr -d ' '`

    # Path to the installed constants.py
    eval "ORIGINAL_CONSTANTS_DIR=(${VENV}/lib/*/site-packages/galaxy_importer/)"

    # Backup up the constants.py file before editing it.
    cp $ORIGINAL_CONSTANTS_DIR/constants.py /tmp/

    # Update constants.py with our choice of FLAKE8_IGNORE entry
    sed "s/E402/$FLAKE8_IGNORE/" ${ORIGINAL_CONSTANTS_DIR}/constants.py > ${ORIGINAL_CONSTANTS_DIR}/constants.py.tmp

    mv ${ORIGINAL_CONSTANTS_DIR}/constants.py.tmp ${ORIGINAL_CONSTANTS_DIR}/constants.py

    message "Creating 'ibm_zos_core' collection with branch: '$GH_BRANCH'."
    . $VENV_BIN/activate && collection_name=$($VENV_BIN/ansible-galaxy collection build --force | awk -F/ '{print $NF}') && ls -la $collection_name

    message "Running Galaxy Importer for collection $collection_name"
    . $VENV_BIN/activate && export GALAXY_IMPORTER_CONFIG=$VENV/galaxy-importer.cfg; python3 -m galaxy_importer.main $collection_name

    mv /tmp/constants.py ${ORIGINAL_CONSTANTS_DIR}/constants.py
}

# ------------------------------------------------------------------------------
# Perform changelog operations on th elocal branch.
# TODO: Add the ability to create a summary.
# ------------------------------------------------------------------------------
#->ac-changelog:
## Perform antsibull-changelog operations such as lint, release and generate, etc
## Usage: ac --ac-changelog [--command <str>]
## Options:
##      command (optional)
##          - choose from 'generate', 'lint', 'lint-changelog-yaml', 'init', 'release',
##          - generate, TODO: Needs doc
##          - lint, (default) check changelog fragments for syntax errors
##          - lint-changelog-yaml, check syntax of changelogs/changelog.yaml file
##          - init, set up changelog infrastructure for collection, or an other project
##          - release, add a new release to the change metadata
## Example:
##  $ ac --ac-changelog --command lint
##  $ ac --ac-changelog --command release
##  $ ac --ac-changelog
ac_changelog(){
    option_command=$1
    message "Performing  changelog operation '$option_command'"
    . $VENV_BIN/activate && antsibull-changelog "${option_command}"
}

# ------------------------------------------------------------------------------
# Install an ibm_zos_core collection from repository
# ------------------------------------------------------------------------------
#->ac-install:
## Install collection 'ibm_zos_core' from galaxy. If no version is specified,
## the latest GA level in repository will be installed.
## Usage: ac --ac-install [--version <int>] [--name <str>]
## Options:
##      version (optional)
##          - The collection version
##      name (optional)
##          - The location to install, valid locations are venv names or 'local'.
##          - Default, latest venv, eg venv-2.xx
##          - If value 'local', collection is installed on the host.
## Example:
##  $ ac --ac-install --version 1.5.0-beta.1 --name venv-2.16
##  $ ac --ac-install --version 1.5.0-beta.1 --name local
##  $ ac --ac-install --version 1.5.0-beta.1
##  $ ac --ac-install
ac_install(){
    option_version=$1
    option_name=$2
    galaxy_path=""      # Empty installs to host default
    git_init=""
    base_name=""

    # There must be a parent git directory in non-default collection installations, see issues
    # https://github.com/ansible/ansible/issues/68499#issuecomment-873660057
    # https://github.com/ansible/ansible/issues/63032
    # Work around is to perform a git init . and create an empty repo where the collection is installed,
    # does not seem to to be an issue with the host installation thus far, only venv's. This is required
    # for ansible-test sanity tests to run, else sanity fails with 'WARNING: All targets skipped.'

    if [ "$option_name" ]; then
        if [ "$option_name" == "local" ];then
            base_name="$HOME/.ansible/collections/ansible_collections"
        else
            VENV=`validate_venv $option_name`
            galaxy_path="-p ${VENV}"
            base_name=`basename $VENV`
            git_init="git init ${VENV}/ansible_collections --quiet"
        fi
    else
        galaxy_path="-p ${VENV}"
        base_name=`basename $VENV`
        git_init="git init ${VENV}/ansible_collections --quiet"
    fi

    if [ "$option_version" ];then
        message "Installing 'ibm.ibm_zos_core' collection version=${option_version} into ${base_name}."
        . $VENV_BIN/activate && $VENV_BIN/ansible-galaxy collection install -fc ibm.ibm_zos_core:${option_version} ${galaxy_path} && ${git_init}
    else
        message "Installing 'ibm.ibm_zos_core' lastet GA version into ${VENV}."
        . $VENV_BIN/activate && $VENV_BIN/ansible-galaxy collection install -fc ibm.ibm_zos_core ${galaxy_path} && ${git_init}
    fi
}

# ------------------------------------------------------------------------------
# Generate module documentation, this will crate the *.rst in the local repo
# ------------------------------------------------------------------------------
#->ac-module-doc:
## Generate module doc with options. Default behavior is to clean and then generate
## module doc in RST. All options are appended makefile targets clean and module-doc.
## If clean is seleceted, only clean is executed.
## Usage: ac --ac-module-doc [--command <str,str>]
## Options:
##      command (optional)
##          - Space or comma delimited make file targets to append to clean and module-doc.
##          - If clean is selected it will be the only makefile target run.
##          - choose from target 'role', 'html', 'clean'.
##          - role, generate role documenation.
##          - html, generate HTML and launch it in a local browser for viewing.
##          - clean, remove staging directories used to generate HTML.
##          - options are case sensitive.
## Example:
##  $ ac --ac-module-doc --command html,role
##  $ ac --ac-module-doc --command clean
##  $ ac --ac-module-doc
ac_module_doc(){
    option_command=$1
    cmd="make clean; make module-doc;"

    # Invoke shell script helpers to set variables if host is not null
    if [ ! -z "${option_command}" ]; then

        count_delim=`echo $option_command | awk -F "," '{print NF-1}'`

        if [ $count_delim -gt 0 ]; then
            # Parse comma delimited string, clean is already in the base command so ignored.
            for command in $(echo $option_command | sed "s/,/ /g"); do
                if [ "$command" == "role" ];then
                    cmd="${cmd} make role-doc;"
                elif [ "$command" == "html" ];then
                    cmd="${cmd} make html; make view-html;"
                fi
            done
        else
            if [ "$command" == "role" ];then
                cmd="${cmd} make role-doc;"
            elif [ "$command" == "html" ];then
                cmd="${cmd} make html; make view-html;"
            elif [ "$command" == "clean" ];then
                    cmd="make clean;"
            fi
        fi
    fi

    # Must install collection on the control node to gen doc because doc needs
    # the collections doc fragments
    ac_build "local"

    # Force the venv-doc virtual environment designed for doc generation.
    VENV_BIN="$VENV_HOME_MANAGED"/venv-doc/bin
    message "Generating module documentation for branch '$GH_BRANCH'."
    . $VENV_BIN/activate && export ANSIBLE_LIBRARY="$HOME/.ansible/collections/ansible_collections/ibm/ibm_zos_core/plugins/modules"; cd docs/ ; eval ${cmd}
}

# ------------------------------------------------------------------------------
# Run ansible-lint on the local GH Branch
# ------------------------------------------------------------------------------
#->ac-lint:
## Run ansible-lint on the local GH branch with the production profile.
## Usage: ac --ac-lint
## Example:
##  $ ac --ac-lint
ac_ansible_lint(){
    message "Linting with ansible-lint on branch: '$GH_BRANCH'."
    . $VENV_BIN/activate && $VENV_BIN/ansible-lint --profile production
}

# ------------------------------------------------------------------------------
# Run the sanity test using docker given python version else default to venv
# TODO: investigate validate:
#   https://docs.ansible.com/ansible/latest/dev_guide/testing/sanity/validate-modules.html#extending-validate-modules
# ------------------------------------------------------------------------------
#->ac-sanity:
## Run ansible-test in docker if the docker engine is running, else run them in
## a managed virtual environment using the installed python version.
## Usage: ac --ac-sanity [--version <float>] [--name <str>]
## Options:
##      version (optional)
##          - Only applies when a container is running.
##          - choose from '2.6', '2.7', '3.5', '3.6', '3.7', '3.8', '3.9', ....
##          - No version selection will run all available python versions in the container.
##      name (optional)
##          - The location of collection, valid locations are venv names or 'local'.
##          - Default, latest venv, eg venv-2.xx
##          - If value 'local', collection is installed on the host.
## Example:
##  $ ac --ac-sanity --version 3.10 --name local
##  $ ac --ac-sanity --version 3.10
##  $ ac --ac-sanity
ac_sanity(){
    option_version=$1
    option_name=$2
    collection_path=""
    base_name=""

    if [ "$option_name" ]; then
        if [ "$option_name" == "local" ];then
            collection_path="$HOME/.ansible/collections/ansible_collections/ibm/ibm_zos_core/"
            # Must install collect to have parity with ansible-test
            ac_build $option_name
        else
            VENV=`validate_venv $option_name`
            collection_path="${VENV}/ansible_collections/ibm/ibm_zos_core/"
            base_name=`basename $VENV`
            # Must install collect to have parity with ansible-test
            ac_build $option_name
        fi
    else
        collection_path="${VENV}/ansible_collections/ibm/ibm_zos_core/"
        base_name=`basename $VENV`
        # Must install collect to have parity with ansible-test
        ac_build
    fi

    if [ "${DOCKER_INFO}" == "0" ]; then
        if [ "${option_version}" ]; then
            message "Running ansible-test in a container with python ${option_version} and collection ${base_name}."
            . $VENV_BIN/activate && export ANSIBLE_TEST_PREFER_PODMAN=1 && cd ${collection_path} && \
            ${VENV_BIN}/ansible-test sanity --python ${option_version} --requirements --docker default && \
            cd ${CURR_DIR};
        else
            message "Running ansible-test in a container all python versions and collection ${base_name}."
            . $VENV_BIN/activate && export ANSIBLE_TEST_PREFER_PODMAN=1 && cd ${collection_path} && \
                ${VENV_BIN}/ansible-test sanity --requirements --docker default && \
                    cd ${CURR_DIR};
        fi
    else
        if [ "${option_version}" ]; then
            message "Docker engine is not running, version ${option_version} will be ignored."
        fi

        . $VENV_BIN/activate && VENV_PY_VER=`python3 --version | cut -d" " -f2 | cut -d"." -f1,2`
        message "Running ansible-test with managed python virtual environment: ${VENV}."
		. $VENV_BIN/activate && cd ${collection_path} && \
			${VENV_BIN}/ansible-test sanity --python ${VENV_PY_VER} --requirements && \
				cd ${CURR_DIR};
    fi
}

# ------------------------------------------------------------------------------
# Run collection test cases using the pytest -ziventory fixture. Setting --name,
# instructs the 'ac' tool which managed venv to use to run pytest. The collection
# being tested must reside in the same managed venv, there is no option today to
# choose the location of the collection and the named venv. For that we would need
# a --location option, thus locally installed collections are not supported, all
# collections must be installed into one of the managed venvs.
# TODO: If --location is to be supported, the ANSIBLE_LIBRARY and ANSIBLE_CONFIG , would need to point to localhost
# ------------------------------------------------------------------------------
#->ac-test:
## Build local branch, install and run tests in the managed venv.
## Usage: ac --ac-test [--host <str>] [--python <float>] [--zoau <float>] [--file <str>] [--debug <boolean>] [--name <str>] [--verbose <boolean>] [--mark <str>] [--stop <boolean>]
## Options:
##     host (optional)
##          - z/OS managed node to run test cases, no selection defaults to
##            a host registerd to your the user id (`whoami`).
##     python (optional)
##          - IBM enterprise python version, choices are 3.8, 3.9, 3.10, 3.11, 3.12
##            no selection defauls to 3.8.
##     zoau (optional)
##          - ZOAU to use in testing, choices are 1.0.3, 1.1.1, 1.2.0, 1.2.1,
##            no selection defaults to 1.1.1 .
##     file (optional)
##          - the absoulte path to a test suite to run, no selection
##            defaults to all test suite running.
##     test (optional)
##          - a test case to run found in 'file', no selection
##            defaults to all tests in file running.
##     debug (optional)
##          - enable debug for pytest (-s), choices are true and false
##     name (optional)
##          - The managed venv to use to run the test instance.
##          - Default, venv with largest value, eg venv-2.17
##          - A name must be a managed venv, lochost installatiosn are not supported.
##     verbose (optional)
##          - Whether to run pytest in verbose mode.
##     mark (optional)
##          - Pytest mark to use to filter tests.
##          - Only runs tests with the given mark.
##     stop (optional)
##          - Whether to stop running tests after a failure is found.
## Example:
##  $ ac --ac-test --host ec01150a --python 3.11 --zoau 1.3.1\
##  $    --file tests/functional/modules/test_zos_operator_func.py --test test_zos_operator_positive_path --debug true
##  $ ac --ac-test --host ec33012a --python 3.11 --zoau 1.3.1 --file tests/functional/modules/test_zos_operator_func.py --debug true
##  $ ac --ac-test --host ec01130a --python 3.11 --zoau 1.3.1 --file invalid/test/returns/rc/of/4/to/stderr 2>>/dev/null
##  $ ac --ac-test --host ec01130a --python 3.11 --zoau 1.3.1 --file tests/functional/modules/test_zos_tso_command_func.py --name venv-2.17
##  $ ac --ac-test --file tests/functional/modules/test_zos_operator_func.py --debug true --verbose true --stop true
##  $ ac --ac-test --file tests/functional/modules/test_zos_copy_func.py --mark template
##  $ ac --ac-test

ac_test(){
    host=$1
    python=$2
    zoau=$3
    file=$4
    test=$5
    debug=$6
    option_name=$7
    verbose=$8
    mark=$9
    stop=$10

    # Check that a collection is installed in the named venv or default venv.
    ac_version $option_name

    # If a --name has been passed, update the the VENV var path appropriately.
    if [ "$option_name" ]; then
        VENV=`validate_venv $option_name`
        VENV_BIN=$VENV/bin
        VENV_BASENAME=`basename $VENV`
    fi

    if [ "$file" ] && [ "$test" ]; then
        file="${file} -k ${test}"
    fi

    if [ "$file" ] && [ "$mark" ]; then
        file="${file} -m ${mark}"
    fi

    if [ "$debug" ]; then
        debug="-s"
    fi

    if [ "$verbose" ]; then
        verbose="-v"
    fi

    if [ "$stop" ]; then
        stop="-x"
    fi

    echo "pytest command constructed: ${file}"

    skip=$CURR_DIR/tests/functional/modules/test_module_security.py

    # Create the config always overwriting existing
    ${VENV}/./venv.sh --config ${host} ${python} ${zoau} ${VENV}

	# Check configuration was created in venv/config.yml, else error and exit
	if test ! -e  ${VENV}/config.yml; then
	    message_error "Unable to find test configration in ${VENV}/config.yml."
	fi

    # TODO: Consider adding the -vvvv like so `$CURR_DIR/${file}  -vvvv --ignore="${skip}"` so that you can access the verbosity feature of pytest.
    if [ "$file" ]; then
        . ${VENV_BIN}/activate && export ANSIBLE_LIBRARY=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/modules;export ANSIBLE_ACTION_PLUGINS=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/action;export ANSIBLE_MODULE_UTILS=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/module_utils;export ANSIBLE_CONFIG=$VENV/ansible.cfg;${VENV_BIN}/pytest $CURR_DIR/${file} --ignore="${skip}" --host-pattern=all --zinventory=${VENV}/config.yml ${debug} ${verbose} ${stop} >&2 ; echo $? >&1
    else
        for file in `ls tests/functional/modules/*.py`; do
            if [ "$file" != "$skip" ]; then
                . ${VENV_BIN}/activate &&  export ANSIBLE_LIBRARY=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/modules;export ANSIBLE_ACTION_PLUGINS=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/action;export ANSIBLE_MODULE_UTILS=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/module_utils;export ANSIBLE_CONFIG=$VENV/ansible.cfg;${VENV_BIN}/pytest $CURR_DIR/${file} --ignore="${skip}" --host-pattern=all --zinventory=${VENV}/config.yml ${debug} ${verbose} >&2 ; echo $? >&1
            fi
        done
    fi

    # Clean up the collections folder after running the tests, temporary work around.
    rm -rf collections/ansible_collections
}

# ------------------------------------------------------------------------------
# Run concurrent executor for identified tests cases.  Setting --name,
# instructs the 'ac' tool which managed venv to use to run pytest. The collection
# being tested must reside in the same managed venv, there is no option today to
# choose the location of the collection and the named venv. For that we would need
# a --location option, thus locally installed collections are not supported, all
# collections must be installed into one of the managed venvs.
# TODO: If --location is to be supported, the ANSIBLE_LIBRARY and ANSIBLE_CONFIG , would need to point to localhost
# ------------------------------------------------------------------------------
#->test-concurrent:
## Run the conncurrent executor (CE) that can drive test cases to a cluster of hosts.
## Usage: ac --test-concurrent [--host <str, str>] [--user <str>] --python <str> [--zoau <str>] [--pythonpath <str>]
##                             [--volumes <str, str>] [--file <str, str>] [--skip <str, str>] [--itr <int>] [--replay <int>]
##                             [--timeout <int>] [--throttle <bool>] [--workers <int>] [--maxjob <int>] [--maxnode <int>]
##                             [--bal <int>] [--verbose <bool>] [--verbosity <int>] [--debug <bool>] [--extra <str>] [--name <str>]
## Options:
##     host (optional):
##          - Space or comma delimited managed nodes to use.
##          - Entering one more managed nodes overrries the auto detection feature which
##            will build a cluster of managed nodes to run on.
##          - Only the host prefix is needed, e.g. 'ec01150a'
##     user (optional):
##          - Ansible user authorized to run tests on the managed node.
##     python (requred):
##          - IBM enterprise python version, e.g 3.10', '3.11', '3.12'
##     zoau (optional):
##          - ZOAU version to use. e.g. 1.2.5, 1.3.0, 1.3.1
##     pythonpath (optional):
##          - The absolute path to where the ZOAU python module is located.
##          - The can be for the precopiled binary, wheels or setup tools installation home.
##          - Default is to use the precompiled binary (until we establish wheel locations)
##     volumes (optional):
##          - The volumes to use with the test cases, overrides the auto volume assignment.
##          - Defaults to, "222222,000000"
##     file (optional):
##          - Space or comma delimited test suites that should be included in the result.
##          - A test suite is a collection of test cases in a file that starts with
##           'test' and ends in '.py'.
##          - Do not include the absolute path, this is automatically deteremined.
##          - For all functional tests, use the `functional/*` notation.
##          - For all unit tests, use the `unit/*` notation for directories.
##          - Default is all functional and unit tests.
##          - A directory of test cases is such that it contains test suites.
##      skip (optional):
##          - Space or comma delimited test suites that should not be included
##            in the result.
##          - Supply only the test suite name, the tooling will prepend the
##            necessay path.
##          - Default is to skip 'test_module_security.py', this can not be removed but
##            it can be replaced with another test or tests.
##      itr (optional):
##          - Configure the number of iterations to rerun failed test cases.
##          - Each iteration will run only the prior iterations failed tests until
##            either their are no more iterations left or there are no more failed
##            tests to run.
##          - Default is 50 so that full regression can succeed.
##      replay (optional):
##          - Instruct the CE to replay the entire command with all provided options
##            for only the failed tests.
##          - The idea behind this is if you did not set enough iterations, rather than
##            start all over you could instruce CE to rerun with the failed test cases
##            it has recorded, giving a higher probabity there will be success.
##          - Each replay will run only the prior iterations failed tests until
##            either their are no more replay's left or there are no more failed
##            tests to run.
##          - Default is 5, so that full regression can succeed.
##      timeout (optional):
##          - The maximum time in seconds a job should wait for completion.
##          - When set, a subprocess call executing pytest will waith this amount of time.
##          - Default is 300 seconds (5 minutes).
##      throttle (optional):
##          - Configuration throttles the managed node test execution such that a node will
##            only run one one job at at time, no matter the threads.
##          - If disabled (False), concurrency will increase, but has the risk of encountering
##            increased ansible connnection failures, while this could result in shorter regression
##            it could also result in longer times because of failed connections.
##          - Default is True, managed nodes will only execute one test at time.
##       workers (optional):
##          - The numerical multiplier used to increase the number of worker threads.
##          - This value is multiplied by the number of managed nodes to calculate the
##            number of threads to start the CE thread pool with.
##          - Default is 1, so CE will have 1 thread for each managed node.
##          - Any value greater than 1, will automatically disable throttle.
##          - At this time, setting more threads could result in connection failures, see throttle.
##       maxjob (optional):
##          - The maximum number of times a test case can fail before its removed from the job queue.
##          - This is helpful in indentifying a bug, possibly in a test case or module.
##          - Setting this value sets an upper bound limit on how many times a test case is permitted
##            to fail.
##          - Default is 10, such that the test will no longer be permitted to execute after 10.
##       maxnode (optional):
##          - The maximum number tests that can fail on a managed node before the node is removed
##            from the node queue.
##          - This helpful in identifying a problematic managed node such that it may require an IPL.
##          - Default is 30, such that the managede will no longer be permitted to run tests after 30.
##          - After the default is exceeded, the managde node is set to OFFLINE status.
##       bal (optional):
##          - The maximum number of times a test is perimtted to fail on a given managed node
##            before be assigned to a new managed node.
##          - This is helpful in identifying test cases that may be experiencing managned node latency,
##            this allows CE to assign the test case to a new less active managed node such that it might
##            a higher chance of success.
##          - Default is 10, after a test case fails 10 times on a node it will be assigned to a new managed node.
##      verbose (optional):
##          - Instruct CE to run with verbose stdout to the console.
##          - This will instruct CE to write all statistics to stdout.
##          - Default is 'False', no verbosity to the console.
##          - Statistics are always written to directory '/tmp' as text and HTML files.
##          - Files in '/tmp' will follow this name pattern, eg conncurrent-excutor-log-<replay>-<status>-<date>.<ext>
##              - examples are:
##                - concurrent-executor-log-00:21:24.txt
##                - concurrent-executor-log-replay-1-failure-00:21:24.html
##                - concurrent-executor-tests-replay-1-success-00:21:24.html
##       verbosity (optional):
##          - Configure pytest verbosity level.
##          - Integer value corresponds to verbosity level.
##            - 1 = -v, 2 = -vv, 3 = -vvv, 4 = -vvvv
##          - Default is 0, no verbosity.
##       debug (optional):
##          - Instruct Pytest whether to capture any output (stdout/stderr), equivalent of pytest -s.
##          - Default False
##       extra (optional):
##          - Extra commands passed to subprocess before pytest execution
##          - This is helpful if you want to expose insert an enviroment var or even
##            run a shell command before exeucting, e.g 'cd ../..'
##       returncode (optional):
##          - Instruct CE whether to return a return code.
##          - If 'True', the stdout is surpressed and a return code is sent to stdout.
##          - A zero return code means the overall execution has successed for the configuration submitted,
##            where a non-zero return code represents the number of failed tests.
##          - Default is False
##       name (optional)
##          - The managed venv to use to run the test instance.
##          - Default, venv with largest value, eg venv-2.17
##          - A name must be a managed venv, lochost installatiosn are not supported.
## Example:
##  $ ac --test-concurrent --host ec01130a --python 3.11 --zoau 1.3.0
##  $ ac --test-concurrent --host ec01130a --python 3.11 --zoau 1.3.0 --file test_zos_operator_func.py --debug true
##  $ ac --test-concurrent --host "ec01130a,ec33012a,ec33017a" --python 3.11 --zoau 1.3.0\
##  $    --file test_zos_operator_func.py,test_zos_job_submit_func.py\
##  $    --skip "test_zos_job_submit_func.py::test_job_from_gdg_source[0]" --debug true
##  $ ac --test-concurrent --host ec01130a --python 3.11 --zoau 1.3.0 --file test_zos_operator_func.py --returncode True --itr 1
##  $ ac --test-concurrent --host ec01130a --python 3.11 --zoau 1.3.1 --file test_zos_data_set_func.py --itr 1 --replay 1
## test_case_1
test_concurrent(){

    # ----------------------------------------------------------------------------------------------------------------------------------
    # CE            -> AC           -> AC vars       -> var mapping                               -> defaults
    # ----------------------------------------------------------------------------------------------------------------------------------
    # --hostnames   -> --host       -> host=$1       -> pass through                              -> adhoc else auto discovered
    # --user        -> --user       -> user=$2       -> pass through                              -> adhoc else auto discovered
    # --pyz         -> --python     -> python=$3     -> pass through                              -> adhoc (auto translated to absolute path)
    # --zoau        -> --zoau       -> zoau=$4       -> pass through                              -> adhoc (auto translated to absolute path)
    # --pythonpath  -> --pythonpath -> pythonpath=$5 -> pass through                              -> 'zoau/lib' or 'zoau/lib/<pyz version>'
    # --volumes     -> --volumes    -> volumes=$6    -> pass through                              -> "222222,000000"
    # --paths       -> --file       -> file=$7       -> pass through                              -> "functional/*,unit/*"
    # --skip        -> --skip       -> skip=$8       -> pass through                              -> "test_module_security.py"
    # --itr         -> --itr        -> itr=$9        -> pass through                              -> 50
    # --replay      -> --replay     -> replay=$10    -> pass through                              -> 5
    # --timeout     -> --timeout    -> timeout=$11   -> pass through                              -> 300
    # --throttle    -> --throttle   -> throttle=$12  -> True = '--throttle', else '--no-throttle' -> True
    # --workers     -> --workers    -> workers=$13   -> pass through                              -> 1
    # --maxjob      -> --maxjob     -> maxjob=$14    -> pass through                              -> 10
    # --maxnode     -> --maxnode    -> maxnode=$15   -> pass through                              -> 30
    # --bal         -> --bal        -> bal=$16       -> pass through                              -> 10
    # --verbose     -> --verbose    -> verbose=$17   -> True = '--verbose', else '--no-verbose'   -> False
    # --verbosity   -> --verbosity  -> verbosity=$18 -> pass through                              -> 0
    # --capture     -> --debug      -> debug=$19     -> True = '--capture', else '--no-capture'   -> False
    # --extra       -> --extr       -> extra=$20     -> pass through                              -> "cd `pwd`"
    # ----------------------------------------------------------------------------------------------------------------------------------

    # echo "host=${1} user=${2} python=${3} zoau=${4} pythonpath=${5} volumes=${6} file=${7} skip=${8} itr=${9} replay=${10}"\
    # "timeout=${11} throttle=${12} workers=${13} maxjob=${14} maxnode=${15} bal=${16} verbose=${17} verbosity=${18} debug=${19} extra=${20} returncode=${21}"

    host="${1}"
    user="${2}"
    python="${3}"
    zoau="${4}"
    pythonpath="${5}"
    volumes="${6}"
    file="${7}"
    skip="${8}"
    itr="${9}"
    replay="${10}"
    timeout="${11}"
    throttle="${12}"
    workers="${13}"
    maxjob="${14}"
    maxnode="${15}"
    bal="${16}"
    verbose="${17}"
    verbosity="${18}"
    debug="${19}"
    extra="${20}"
    returncode="${21}"
    option_name="${22}"

    # Check that a collection is installed in the named venv or default venv.
    ac_version $option_name

    # If a --name has been passed, update the the VENV var path appropriately.
    if [ "$option_name" ]; then
        VENV=`validate_venv $option_name`
        VENV_BIN=$VENV/bin
        VENV_BASENAME=`basename $VENV`
    fi

    # Invoke shell script helpers to set variables if host is not null
    if [ ! -z "${host}" ]; then

        count_delim=`echo $host | awk -F "," '{print NF-1}'`

        if [ $count_delim -gt 0 ]; then
            first_entry=true
            # Parse comma delimited string, for each entry perfom an operaion.
            for host_entry in $(echo $host | sed "s/,/ /g"); do
                if [ "$first_entry" == "true" ]; then
                    first_entry=false

                    all_hosts=$($VENV/./venv.sh --host-credentials "${host_entry}")

                    if [ -z "${user}" ]; then
                        user=$($VENV/./venv.sh --user-credentials "${host_entry}")
                    fi

                    if [ -z "${pass}" ]; then
                        pass=$($VENV/./venv.sh --pass-credentials "${host_entry}")
                    fi
                else
                    host_entry=$($VENV/./venv.sh --host-credentials "${host_entry}")
                    all_hosts="${all_hosts},${host_entry}"
                fi
            done

            host=$all_hosts
        else
            host_entry=$host
            host=$($VENV/./venv.sh --host-credentials "${host_entry}")

            if [ -z "${user}" ]; then
                user=$($VENV/./venv.sh --user-credentials "${host_entry}")
            fi

            if [ -z "${pass}" ]; then
                pass=$($VENV/./venv.sh --pass-credentials "${host_entry}")
            fi
        fi
    fi


    # Convert the python from short notation to absolute path
    python=$($VENV/./mounts.sh --get-python-mount "${python}")

    zoau=$($VENV/./mounts.sh --get-zoau-mount "${zoau}")

    # Build a zoau precompiled binary path if $pythonpath is null
    if [ -z "${pythonpath}" ]; then
        zoau_version=`echo ${zoau#*/v}`
        if [ $(normalize_version "${zoau_version}") -lt 1003000000 ]; then
                pythonpath=$zoau/lib
        else
            suffix=`echo ${python#*cyp/v}`
            version=`echo ${suffix%*/pyz}`
            pythonpath_version=`echo $version|sed 's/r/./g'`
            pythonpath=$zoau/lib/$pythonpath_version
        fi
    fi

    first_entry=true
    file_tests=""
    strings_func=$(ac_test_pytest_finder "functional/*" "" true true)
    strings_unit=$(ac_test_pytest_finder "unit/*" "" true true)

    corrected_file=""
    # Support shorter notation passed to the utils module 'get_test_case()'', the python module
    # does not support such notation because the module can be run from many locations and requires
    # absolute paths. This notation is translated to absolute paths.
    # TODO: Add support for invidual tests, --file test_load_balance_full.py::test_case_1, issue 1636
    for i in $(echo $file | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$i" == "functional/*" ];then
            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/"
            fi
        elif [ "$i" == "unit/*" ];then
            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/"
            fi
        elif echo $strings_func | tr ' ' '\n'|grep $i >/dev/null; then
            if [ ! -e "$CURR_DIR/tests/functional/modules/$i" ]; then
                message_error "File = $CURR_DIR/tests/functional/modules/$i not found."
            fi

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/$i"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/$i"
            fi
        elif echo $strings_unit | tr ' ' '\n'|grep $i >/dev/null; then
            if [ ! -e "$CURR_DIR/tests/unit/$i" ]; then
                message_error "File = $CURR_DIR/tests/unit/$i not found."
            fi

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/$i"
            fi
        elif [[ $i == tests/functional/modules/* ]] || [[ $i == $CURR_DIR/tests/functional/modules/* ]] ;then
            message_warn "It appears an absolute path has been used, 'ac' will try to truncate it to the test suite."
            suffix=`echo ${i#*/modules/}`

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/$suffix"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/$suffix"
            fi
        elif [[ $i == tests/unit/* ]] || [[ $i == $CURR_DIR/tests/unit/* ]] ;then
            message_warn "It appears an absolute path has been used, 'ac' will try to truncate it to the test suite."
            suffix=`echo ${i#*/modules/}`

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/$suffix"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/$suffix"
            fi
        else
            message_error "File = $i, not found in project path = $CURR_DIR."
        fi
    done
    first_entry=true
    file=$file_tests

    # Convert any comma separated strings to space delimited as needed by the tooling.
    first_entry=true
    skip_tests=""
    for i in $(echo $skip | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$first_entry" == "true" ];then
            first_entry=false
            skip_tests="$CURR_DIR/tests/functional/modules/$i"
        else
            skip_tests="$skip_tests $CURR_DIR/tests/functional/modules/$i"
        fi
    done
    skip=$skip_tests

    # Uppercase value for --throttle
    throttle=`echo $throttle | tr '[:lower:]' '[:upper:]'`
    if [ "$throttle" == "TRUE" ];then
        throttle="--throttle"
    else
        throttle="--no-throttle"
    fi

    # Uppercase value for --verbose
    verbose=`echo $verbose | tr '[:lower:]' '[:upper:]'`
    if [ "$verbose" == "TRUE" ];then
        verbose="--verbose"
    else
        verbose="--no-verbose"
    fi

    # Uppercase value for --capture
    debug=`echo $debug | tr '[:lower:]' '[:upper:]'`
    if [ "$debug" == "TRUE" ];then
        debug="--capture"
    else
        debug="--no-capture"
    fi

    # Uppercase value for --capture
    returncode=`echo $returncode | tr '[:lower:]' '[:upper:]'`
    if [ "$returncode" == "TRUE" ];then
        returncode="--returncode"
    else
        returncode="--no-returncode"
    fi

    # Useful for debug to see what is acutally passed what ./ac will pass to ce.py
    # echo "host=${host} user=${user} python=${python} zoau=${zoau} pythonpath=${pythonpath} volumes=${volumes},"\
    #         "file=${file} skip=${skip} itr=${itr} replay=${replay} timeout=${timeout} throttle=${throttle}"\
    #         "workers=${workers} maxjob=${maxjob} maxnode=${maxnode} bal=${bal} verbose=${verbose}"\
    #         "verbosity=${verbosity} debug=${debug} extra=${extra} returncode=${returncode}"

    # read _host _user _pass <<<$($VENV/./venv.sh --host-credentials "${host}")
    #export ANSIBLE_LIBRARY=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/modules;export ANSIBLE_CONFIG=$VENV/ansible.cfg;
    message "Concurrent executor testing is evaluating supplied options and preparing to execute."
    . $VENV_BIN/activate && export ANSIBLE_LIBRARY=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/modules;export ANSIBLE_CONFIG=$VENV/ansible.cfg;python3 $VENV/ce.py\
        --hostnames  "${host}"\
        --user "${user}"\
        --pyz "${python}"\
        --zoau "${zoau}"\
        --pythonpath "${pythonpath}"\
        --volumes "${volumes}"\
        --paths "${file}"\
        --skip "${skip}"\
        --itr "${itr}"\
        --replay "${replay}"\
        --timeout "${timeout}"\
        "${throttle}"\
        --workers "${workers}"\
        --maxjob "${maxjob}"\
        --maxnode "${maxnode}"\
        --bal "${bal}"\
        "${verbose}"\
        --verbosity "${verbosity}"\
        "${debug}"\
        --extra "${extra}"\
        "${returncode}"
}

# ------------------------------------------------------------------------------
# Print the configuration used to connect to the managed node for functional tests
# ------------------------------------------------------------------------------
#->ac-test-config:
## Disply the contents of configuration file used to run functional tests.
## Usage: ac --ac-test-config [--name <str>]
## Options:
##      name (optional)
##          - The test configuration location which must be a managed venv name, e.g 'venv-2.16'
##          - The default location is the latest managed venv.
## Example:
##  $ ac --ac-test-config --name venv-2.17
##  $ ac --ac-test-config
ac_test_config(){
    option_name=$1
    if [ "$option_name" ]; then
        VENV=`validate_venv $option_name`
        base_name=`basename $VENV`
    fi

	if [ -f "${VENV}/config.yml" ]; then
        message "Configuration for automated testing in ${base_name}."
	    cat ${VENV}/config.yml;
	else
        message_error "Configuration was found in ${option_name}, run '--ac-test' to generate a configuration."
	fi
}

# ------------------------------------------------------------------------------
# Get a list of test cases from the dependency finder depending on options.
# ------------------------------------------------------------------------------
#->test-dep-find:
## Determine which test suites to run given the options selected.
## Usage: ac --test-dep-find [--branch <str,str>] [--skip <str, str>]
## Options:
##      branch (optional):
##          - The branch to compare to when performing dependency analaysis. The
##            comparison always uses the currently checked out local branch and
##            compares that to the 'branch' supplied.
##          - The default branch is 'dev'
##      skip (optional):
##          - Space or comma delimited test suites that should not be included
##            in the result.
##          - Supply only the test suite name, the tooling will prepend the
##            necessay path.
##          - Default is to skip 'test_module_security.py', this can not be removed but
##            it can be replaced with another test or tests.
##     pretty (optional):
##          - Pretty formatting where each value is a line followed by a line feed,
##            otherwise a list[str] format is returned.
## Example:
##  $ ac --test-dep-find --branch main --skip "test_module_security.py,test_zos_apf_func.py" --pretty False
##  $ ac --test-dep-find --branch dev --skip "test_zos_apf_func.py"
##  $ ac --test-dep-find --branch main
##  $ ac --test-dep-find

ac_test_dep_finder(){
    branch=$1
    skip="$2"

    # Convert any comma separated strings to space delimited as needed by the tooling.
    first_entry=true
    skip_tests=""
    for i in $(echo $skip | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$first_entry" == "true" ];then
            first_entry=false
            skip_tests="$CURR_DIR/tests/functional/modules/$i"
        else
            skip_tests="$skip_tests $CURR_DIR/tests/functional/modules/$i"
        fi
    done
    skip=$skip_tests

    # If branch is defined provide results on that comparison branch else default to the `dev` branch.
    if [ -z "$branch" ]; then
        branch="dev"
        message "Compiling a list functional and unit tests suites excluding skipped tests."
        . $VENV_BIN/activate && result=`$VENV_BIN/python ${VENV}/dependencyfinder.py -p ${CURRENT_DIR} -a -s "${skip}"`
    else
        message "Compiling a list dependent tests cases to run based on the changes between local branch '$GH_BRANCH' and target branch '$branch', excluding skipped tests."
        . $VENV_BIN/activate && result=`$VENV_BIN/python ${VENV}/dependencyfinder.py -p ${CURRENT_DIR} -b ${branch} -s "${skip}" -m`
    fi

    # Uppercase value for --pretty
    pretty=`echo $3 | tr '[:lower:]' '[:upper:]'`
    if [ "$pretty" == "TRUE" ];then
        echo $result |tr '[[:space:]]' '\n'
    else
        export env_result=${result}
        result=`$VENV_BIN/python3 -c "from os import environ;all = environ['env_result'].split(',');print(str(all))"`
        echo $result
    fi
}

# ------------------------------------------------------------------------------
# Get a list of all test cases using pytest including parameterization
# ------------------------------------------------------------------------------
#->test-pytest-find:
## Get a list of parametizd test cases used by pytest
## Usage: ac --test-pytest-find [--file <str, str>] [--skip <str, str>] [--pretty <bool>]
## Options:
##     file (optional):
##         - Space or comma delimited test suites that should be included
##           in the result.
##         - A test suite is a collection of test cases in a file that starts with
##           'test' and ends in '.py'.
##         - For all functional tests, use the `functional/*` notation for directories.
##         - For all unit tests, use the `unit/*` notation for directories.
##         - Default is all functional and unit tests.
##         - A directory of test cases is such that it contains test suites.
##     skip (optional) - (str):
##         - Space or comma delimited test suites that should be omitted
##           in the result.
##         - A test suite is a collection of test cases in a file that starts with
##           'test' and ends in '.py'.
##          - Default is to skip 'test_module_security.py', this can not be removed but
##            it can be replaced with another test or tests.
##          - Test cases can be parametrized such they use the '::' syntax or not.
##          - Skip does not support directories.
##     pretty (optional):
##          - Pretty formatting where each value is a line follwoed by a line feed,
##            otherwise a list[str] format is returned.
## Example:
##  $ ac --test-pytest-find --file "test_zos_copy_func.py,test_zos_mvs_raw_unit.py" --skip "test_zos_job_submit_func.py,test_module_security.py" --pretty false
##  $ ac --test-pytest-find --file "functional/*,unit/*" --skip "test_module_security.py"
##  $ ac --test-pytest-find --file "test_zos_copy_func.py"
##  $ ac --test-pytest-find --pretty true
##  $ ac --test-pytest-find|wc -l
ac_test_pytest_finder(){
    file=$1
    skip="$2"
    # Uppercase value for --pretty
    pretty=`echo $3 | tr '[:lower:]' '[:upper:]'`
    slience_messages="$4" # This is an undocumented option to disable INFO messages

    first_entry=true
    file_tests=""
    strings_func=$(ls "$CURR_DIR/tests/functional/modules/")
    strings_unit=$(ls "$CURR_DIR/tests/unit/")

    # As a courtesy, aid in shorter notation supplied to the utils module get_test_case(), the python module
    # does not support such notation because the module can be run from many locations and requires absolute
    # paths.
    for i in $(echo $file | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$i" == "functional/*" ];then
            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/"
            fi
        elif [ "$i" == "unit/*" ];then
            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/"
            fi
        elif echo $strings_func | tr ' ' '\n'|grep $i >/dev/null; then
            if [ ! -e "$CURR_DIR/tests/functional/modules/$i" ]; then
                message_error "File = $CURR_DIR/tests/functional/modules/$i not found."
            fi

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/functional/modules/$i"
            else
                file_tests="$file_tests $CURR_DIR/tests/functional/modules/$i"
            fi
        elif echo $strings_unit | tr ' ' '\n'|grep $i >/dev/null; then
            if [ ! -e "$CURR_DIR/tests/unit/$i" ]; then
                message_error "File = $CURR_DIR/tests/unit/$i not found."
            fi

            if [ "$first_entry" == "true" ];then
                first_entry=false
                file_tests="$CURR_DIR/tests/unit/"
            else
                file_tests="$file_tests $CURR_DIR/tests/unit/$i"
            fi
        else
            message_error "File = $i, not found in project path = $CURR_DIR."
        fi
    done
    first_entry=true
    file=$file_tests
    export env_file=${file}

    # Convert any comma separated strings to space delimited as needed by the tooling.
    first_entry=true
    skip_tests=""
    for i in $(echo $skip | sed "s/,/ /g") # Optionally: skip=\"`echo $2 | tr ',' ' '`\"
    do
        if [ "$first_entry" == "true" ];then
            first_entry=false
            skip_tests="$CURR_DIR/tests/functional/modules/$i"
        else
            skip_tests="$skip_tests $CURR_DIR/tests/functional/modules/$i"
        fi
    done

    skip=$skip_tests
    export env_skip=${skip}


    slience_messages=`echo $slience_messages | tr '[:lower:]' '[:upper:]'`
    if [ "$slience_messages" != "TRUE" ];then
        message "Compiling a list of test cases for the provided test suites excluding any skip tests.." $slience_messages
    fi

    . $VENV_BIN/activate && result=`export PYTHONPATH=$VENV;$VENV_BIN/python -c "from modules.utils import get_test_cases;from os import environ;\
        tests = get_test_cases(paths=environ['env_file'], skip=environ['env_skip']);all=','.join(tests);print(all)"`

    if [ "$pretty" == "TRUE" ];then
        echo $result |tr ',' '\n';
    else
        export env_result=${result}
        result=`$VENV_BIN/python3 -c "from os import environ;all = environ['env_result'].split(',');print(str(all))"`
        echo $result
    fi
}

# ------------------------------------------------------------------------------
# Check the version of the ibm_zos_core collection installed
# ------------------------------------------------------------------------------
#->ac-version:
## List the version of the collection installed in a managed venv or the controller.
## Usage: ac --ac-version [--name <str>]
## Options:
##      name (optional)
##          - The test configuration location which must be a managed venv name, e.g 'venv-2.16'
##          - The default location is the latest managed venv.
## Options:
##      name (optional)
##          - The location the collection is installed.
##          - The default is the latest venv.
##          - If value 'local' is set, it will search localhost for the collection.
## Example:
##  $ ac --ac-version --name venv-2.17
##  $ ac --ac-version
ac_version(){
    option_name=$1
    collection_path=""  # No value, installs to host default
    base_name=""


    if [ "$option_name" ]; then
        if [ "$option_name" == "local" ];then
            collection_path="$HOME/.ansible/collections/ansible_collections"
            base_name=`hostname`
        else
            VENV=`validate_venv $option_name`
            collection_path="${VENV}/ansible_collections"
            base_name=`basename $VENV`
        fi
    else
        collection_path="${VENV}/ansible_collections"
        base_name=`basename $VENV`
    fi

    manifest=$(cat ${collection_path}/ibm/ibm_zos_core/MANIFEST.json > /dev/null 2>&1)
    rc=$(echo $?)
    if [ $rc -eq 0 ]; then
        message "Discovered ibm_zos_core collection installation in ${base_name}."
        cat ${collection_path}/ibm/ibm_zos_core/MANIFEST.json \
        | grep version|cut -d ':' -f 2 | sed 's/,*$//g' | tr -d '"';
    else
        message_error "Unable to find a collection at $collection_path, consider running 'ac --install --name $option_name'."
    fi
}

# ------------------------------------------------------------------------------
# Encrypt a file, it the users responsiblity to remove the uncrypted file
# afterwards, also ensure it does not end up in a public rep such that it is
# in .gitignore
# Consider adding salt
# # encrypt file.txt to file.enc using 256-bit AES in CBC mode
# openssl enc -aes-256-cbc -salt -in file.txt -out file.enc
# the same, only the output is base64 encoded for, e.g., e-mail
# openssl enc -aes-256-cbc -a -salt -in file.txt -out file.enc
# decrypt binary file.enc
# openssl enc -d -aes-256-cbc -in file.enc -out file.txt
# decrypt base64-encoded version
# openssl enc -d -aes-256-cbc -a -in file.enc -out file.txt
# ------------------------------------------------------------------------------
#->file-encrypt:
## Encrypt a file as a new file
## Usage: ac [--file-encrypt --file <file> --out-file <file> --password <password>]
## Options:
##     file     - the file to encrypt.
##     out-file - the encrypted output.
##     password - the key (password) used to encrypt the file.
## Example:
##  $ ac --file-encrypt --file some.txt --out-file some.txt.axx --password 12345678
file_encrypt(){
    option_file=$1
    option_out_file=$2
    option_pass=$3

    if [ ! "$option_file" ] || [ ! "$option_out_file" ] || [ ! "$option_pass" ]; then
        message "Unable to encrpyt file, missing option values."
        exit 1
    fi
    message "Encrypting file $option_file as file $option_out_file."
    touch $option_out_file
    chmod 700 $option_out_file
    echo "${option_pass}" | openssl enc -aes-256-cbc -a -salt -in $option_file -out $option_out_file -pass stdin
	#echo "${option_pass}" | openssl bf -a -in $option_file -out $option_out_file -pass stdin
}

# ------------------------------------------------------------------------------
# decrypt a file, it the users responsiblity to remove the uncrypted file
# afterwards, also ensure it does not end up in a public rep such that it is
# in .gitignore
# ------------------------------------------------------------------------------
#->file-decrypt:
## Decrypt a file as a new file and apply file permissions 700, RWX only to the owner.
## Usage: ac [--file-decrypt --file <file> --out-file <out-file> --password <password>]
## Options:
##     file     - the file to decrypt.
##     out-file - the decrypted output
##     password - the key (password) used when encrypting the file.
## Example:
##  $ ac --file-decrypt --file some.txt.axx --out-file some.txt --password 12345678
file_decrypt(){
    option_file=$1
    option_out_file=$2
    option_pass=$3
    if [ ! "$option_file" ] || [ ! "$option_out_file" ] || [ ! "$option_pass" ]; then
        message "Unable to decrpyt file, missing option values."
        exit 1
    fi
    message "Decrypting the file ${option_file} as ${option_out_file}."
	#echo "${option_pass}" | openssl bf -d -a -in $option_file -out $option_out_file -pass stdin
    echo "${option_pass}" | openssl enc -d -aes-256-cbc -a -in $option_file -out $option_out_file -pass stdin
    chmod 700 $option_out_file
}

#->host-auth:
## Copy your ssh key to a `host` or the default which is your username.
## Usage: ac --host-auth [--host <str,str>]
## Options:
##     host     - z/OS managed node, no selection defaults to
##                a host registerd to your user id (`whoami`).
## Options:
##     host (optional):
##         - Space or comma delimited string of host names, eg 'ec1234a,ec4321a'
##         - Defaults to a host registered to your local laptops username , eg `whoami`
##         - If more than one host name is set, the command will concurrently connect
##           to each host, and 'wait' for completion and print the results.
## Example:
##  $ ac --host-auth --host ec33012a,ec03190a,ec01135a
##  $ ac --host-auth --host ec33012a
host_auth(){
    option_host=$1
    if [ ! "$option_host" ]; then
        host=`whoami`
    else
        count_delim=`echo $option_host | awk -F "," '{print NF-1}'`

        if [ $count_delim -gt 0 ]; then
            pids=""
            first_entry=true
            # Parse comma delimited string, for each entry perfom an operaion.
            for host in $(echo $option_host | sed "s/,/ /g"); do
                message "Copy SSH keys to the managed node $host"
                touch /tmp/auth.${host}
                # Put command in background
                $VENV/./venv.sh --cert $host >/tmp/auth.${host} 2>&1 &
                # Capture the pid for identification later
                pid=$!
                # Sleep helps with target file does not exit
                sleep .5

                mv /tmp/auth.${host} /tmp/auth.${pid}.${host}
                if [ "$first_entry" == "true" ]; then
                    first_entry=false
                    pids="${pid}"
                else
                    pids="${pids},${pid}"
                fi
            done

            message "Processes peforming authenication [ $pids ]."
            message "Waiting on processes to complete remote authentication."
            # Pefrom a global wait here to force all the mounts to finish (can also use jobs command to show more)
            wait

            # Wait is now done, run trhough the pids and evaluate
            for p in $(echo $pids | sed "s/,/ /g"); do
                # '#?' after 'ps -p' will return 0 if the process is running, otherwise 1
                auth_rc=$(ps -p $p >/dev/null;echo $?)
                auth_output=`ls /tmp/auth.${p}*`
                auth_output_pid=`echo $auth_output | cut -d'.' -f2`
                auth_output_host=`echo $auth_output | cut -d'.' -f3`
                if [ $auth_rc -eq 1 ]; then
                    message "Authentication for $auth_output_host completed."
                else
                    message "Unable to determine authenciation status for ${auth_output_host}."
                fi
                cat $auth_output
                rm -rf ${auth_output}
            done
        else
            message "Copy SSH keys to the managed node $option_host"
            $VENV/./venv.sh --cert $option_host
        fi
    fi
}

# ------------------------------------------------------------------------------
# Copy mount & profile scripts to users home directory on the target and execute
# mount script. Should automatically authenticate your ssh key.
# ------------------------------------------------------------------------------
#->host-mount:
## Copy helper scripts to remote machine and then perform mounts.
## Usage: ac --host-mount [--host <str,str>]
## Options:
##     host (optional):
##         - Space or comma delimited string of host names, eg 'ec1234a,ec4321a'
##         - Defaults to a host registered to your local laptops username , eg `whoami`
##         - If more than one host name is set, the command will concurrently connect
##           to each host, and 'wait' for completion and print the results.
## Example:
##  $ ac --host-mount --host ec33012a,ec03190a,ec01135a
##  $ ac --host-mount --host ec33012a
host_mount(){
    option_host=$1
    if [ ! "$option_host" ]; then
        option_host=`whoami`
    else
        count_delim=`echo $option_host | awk -F "," '{print NF-1}'`

        if [ $count_delim -gt 0 ]; then
            pids=""
            first_entry=true
            # Parse comma delimited string, for each entry perfom an operaion.
            for host in $(echo $option_host | sed "s/,/ /g"); do
                host_auth $host
                rc=$?
                if [ ${rc} -eq 0 ]; then
                    message "Copying mount.env, mount.sh, profile.sh scripts to host $host and then performing mounts."
                    touch /tmp/mount.${host}
                    $VENV/./venv.sh --host-setup-files $host $VENV/"mounts.env" $VENV/"mounts.sh" $VENV/"profile.sh" >/tmp/mount.${host} 2>&1 &
                    pid=$!
                    # Sleep helps with target file does not exit
                    sleep .5
                    mv /tmp/mount.${host} /tmp/mount.${pid}.${host}

                    if [ "$first_entry" == "true" ];then
                        first_entry=false
                        pids="${pid}"
                    else
                        pids="${pids},${pid}"
                    fi
                fi
            done

            message "Processes peforming mounts [ $pids ]"
            message "Waiting on processes to complete remote mounts."
            # Pefrom a global wait here to force all the mounts to finish
            wait

            # Wait is now done, run trhough the pids and evaluate
            for p in $(echo $pids | sed "s/,/ /g"); do
                # '#?' after 'ps -p' will return 0 if the process is running, otherwise 1
                mount_rc=$(ps -p $p >/dev/null;echo $?)
                mount_output=`ls /tmp/mount.${p}*`
                mount_output_pid=`echo $mount_output | cut -d'.' -f2`
                mount_output_host=`echo $mount_output | cut -d'.' -f3`
                if [ $mount_rc -eq 1 ]; then
                    message "Mounts for $mount_output_host completed."
                else
                    message "Unable to determine status for ${mount_output_host}."
                fi
                cat ${mount_output}
                rm -rf ${mount_output}
            done
        else
            host_auth $option_host
            message "Copying mount.env, mount.sh, profile.sh scripts to host $option_host and then performing mounts."
            $VENV/./venv.sh --host-setup-files $option_host $VENV/"mounts.env" $VENV/"mounts.sh" $VENV/"profile.sh"
        fi
    fi
}

# ------------------------------------------------------------------------------
# Print the mount table contents
# ------------------------------------------------------------------------------
#->host-mounts:
## Print the ZOAU and Python mount tables used by this utility.
## Usage: ac --host-mounts
## Example:
##  $ ac --host-mounts
host_mounts(){
    message "Print mount tables used by the $0 utility"
    $VENV/mounts.sh --print-mount-tables
}

# ------------------------------------------------------------------------------
# Print the z/OS host IDs and hostnames
# ------------------------------------------------------------------------------
#->host-nodes:
## Print all managed nodes hostnames.
## Usage: ac --host-nodes [--all <bool>] [--pretty <bool>]
## Options:
##     all      - Print all managed nodes hostnames.
## Options:
##     all (optional):
##         - Option will control what content is printed.
##         - If true (default), both the ID and hostname are printed as space delimited.
##         - If false, only the hostnames marked for production are printed as space delimited.
##     pretty (optional):
##          - Pretty formatting where each value is a line followed by a line feed,
##            otherwise a list[str] format is returned.
## Example:
##  $ ac --host-nodes [--all <bool>] [--pretty <bool>]
##  $ ac --host-nodes
##  $ ac --host-nodes --all false
host_nodes(){
    # Uppercase value for --all
    all=`echo $1 | tr '[:lower:]' '[:upper:]'`
    pretty=`echo $2 | tr '[:lower:]' '[:upper:]'`

    if [ "$all" == "FALSE" ]; then
        message "Producution managed hosts."
        result=`$VENV/venv.sh --targets-production`
        if [ "$pretty" == "TRUE" ];then
            echo $result |tr ' ' '\n';
        else
            echo [$result] |tr ' ' ', ';
        fi
    else
        message "All managed hosts."
        result=`$VENV/venv.sh --targets`
        if [ "$pretty" == "TRUE" ];then
            echo $result |sed 's/ID/\n&/g'
        else
            result=`echo $result |sed 's/ID/,&/g' | cut -c2-`
            echo [$result]
        fi
    fi
}

# ------------------------------------------------------------------------------
# This is the only script that has to be relativly executed from (scripts/)
# because at this point, no managed venv exists.
# TODO: Support -force to replace/update and possible BYO reqs file
# ------------------------------------------------------------------------------
#->venv-setup:
## Create managed virtual environments using the latest (discovred) python3.
## If the password option is not provided, the info.env.axx file will not be
## associated to the managed venv's, thus you will see messages asking you to
## export some variables such as USER, HOST_SUFFIX, etc. Choosing not to use
## the 'password' option should only an option when the utility can not decrypt.
## Usage: ac [--venv-setup] [--password 123456]
## Example:
##  $ ac --venv-setup --password 123456
##  $ ac --venv-setup
venv_setup(){
    option_pass=$1
    message "Create managed virtual environments based on hosts latest python3."
    scripts/./venv.sh --vsetup --password $option_pass
}

# ------------------------------------------------------------------------------
# Allows you to activate the lastet ansible managed virtual enviroments
# ------------------------------------------------------------------------------
#->venv-start:
## Activate the latest ansible managed virtual environment or optionally start
## by its name.
## Usage: ac [--venv-start --name <venv name>]
## Example:
##  $ ac --venv-start --name venv-2.16
##  $ ac --venv-start
venv_start(){
    option_name=$1

    if [ "$option_name" ]; then
        VENV=`validate_venv $option_name`

        if [ ! -z "$VENV" ]; then
            VENV_BIN=$VENV/bin
            VENV_BASENAME=`basename $VENV`
        fi
    fi

    message "Starting managed python virtual environment: $VENV_BASENAME"
    # Original , see comments below.
    #. $VENV_BIN/activate; exec /bin/sh -i

    # TODO: Document wny /bin/bash -c was introduced , the shebang already forces this, could have been because of original CE design which should not depend on bash.
    # /bin/bash -c ". $VENV_BIN/activate; exec /bin/sh -i;"

    # Invoke venv with epxorts that can find the ansible collection within the venv.
    /bin/bash -c ". $VENV_BIN/activate && export ANSIBLE_LIBRARY=$VENV/ansible_collections/ibm/ibm_zos_core/plugins/modules;export ANSIBLE_CONFIG=$VENV/ansible.cfg; exec /bin/sh -i;"
}

# ------------------------------------------------------------------------------
# Allows you to deactivate the lastet ansible managed virtual enviroments
# ------------------------------------------------------------------------------
#->venv-stop:
## Deactivate the latest ansible managed virtual environment or optionally deactivate
## by its name.
## Usage: ac [--venv-stop --name <venv name>]]
## Example:
##  $ ac --venv-stop --name venv-2.16
##  $ ac --venv-stop
venv_stop(){
    option_name=$1

    if [ "$option_name" ]; then
        VENV=`validate_venv $option_name`

        if [ ! -z "$VENV" ]; then
            VENV_BIN=$VENV/bin
            VENV_BASENAME=`basename $VENV`
        fi
    fi

    message "Stopping managed ansible virtual environment located at: $VENV_BASENAME"
    # message "ac --venv-stop does not actually currently work, use CNTL-D"
    # . deactivate $VENV_BASENAME;
    # deactivate venv/$VENV_BASENAME
    venv_tty=`tty`
    venv_tty=`basename $venv_tty`
    venv_pid=`ps -ef |grep $venv_tty | grep -v "grep" | grep "/bin/sh -i" | awk '{print $3}'`
    kill -9 $venv_pid > /dev/null 2>&1
}

# ==============================================================================
# Main arg parsing
# ==============================================================================
while true; do
    option=$1
    if [ "$option" ]; then
        # Check that we see a '-' or '--' in all options, else error and exit.
        test_long_input=`echo "$option" | grep "^--?*"`
        test_short_input=`echo "$option" | grep "^-?*"`
        if [ ! "$test_short_input" ] && [ ! "$test_long_input" ]; then
            echo "Please use valid syntax for option $option, it appears to be missing '-' or '--'."
            exit 1
        fi
    fi
    case $1 in
      -h|-\?|--help)
        if [ "$1" = "-h" ] || [ "$1" = "-?" ]; then
            help
        else
            help "verbose"
        fi
         exit
         ;;
      --ac-bandit)                              # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-bandit"
            ;;
      --ac-build)                               # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-build"
            ;;
      --ac-galaxy-importer)                     # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-galaxy-importer"
            ;;
      --ac-changelog)                           # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-changelog"
            ;;
      --ac-module-doc)                          # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-module-doc"
            ;;
      --ac-install)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-install"
            ;;
      --ac-lint)                                # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-lint"
            ;;
      --ac-sanity |--ac-sanity=?*)              # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-sanity"
            ;;
      --ac-test|--ac-test=?*)                   # command
            ensure_managed_venv_exists $1
            option_submitted="--ac-test"
            ;;
      --ac-test-config|--ac-test-config=?*)     # command
            ensure_managed_venv_exists $1
            option_submitted="--ac-test-config"
            ;;
      --test-concurrent|--test-concurrent=?*)     # command
            ensure_managed_venv_exists $1
            option_submitted="--test-concurrent"
            ;;
      --test-dep-find|--test-dep-find=?*)       # command
            ensure_managed_venv_exists $1
            option_submitted="--test-dep-find"
            ;;
      --test-pytest-find|--test-pytest-find=?*) # command
            ensure_managed_venv_exists $1
            option_submitted="--test-pytest-find"
            ;;
      --ac-version)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--ac-version"
            ;;
      --file-encrypt)                           # Command
            ensure_managed_venv_exists $1
            option_submitted="--file-encrypt"
            ;;
      --file-decrypt)                           # Command
            ensure_managed_venv_exists $1
            option_submitted="--file-decrypt"
            ;;
      --host-auth|--host-auth=?*)               # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-auth"
            ;;
      --host-config)                            # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-config"
            ;;
      --host-mount|--host-mount=?*)             # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-mount"
            ;;
      --host-mounts)                            # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-mounts"
            ;;
      --host-nodes)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--host-nodes"
            ;;
      --venv-setup)                             # Command
            option_submitted="--venv-setup"
            ;;
      --venv-start)                             # Command
            ensure_managed_venv_exists $1
            option_submitted="--venv-start"
            ;;
      --venv-stop)                              # Command
            ensure_managed_venv_exists $1
            option_submitted="--venv-stop"
            ;;
      --all|--all=?*)                           # option
            all=`option_processor $1 $2`
            option_sanitize $all
            shift
            ;;
      --bal|--bal=?*)                           # option
            bal=`option_processor $1 $2`
            option_sanitize $bal
            shift
            ;;
      --command|--command=?*)                   # option
            command=`option_processor $1 $2`
            option_sanitize $command
            shift
            ;;
      --branch|--branch=?*)                     # option
            branch=`option_processor $1 $2`
            option_sanitize $branch
            shift
            ;;
      --debug|--debug=?*)                       # option
            debug=`option_processor $1 $2`
            option_sanitize $debug
            shift
            ;;
      --extra|--extra=?*)                       # option
            extra=`option_processor $1 $2`
            option_sanitize $extra
            shift
            ;;
      --file|--file=?*)                         # option
            file=`option_processor $1 $2`
            option_sanitize $file
            shift
            ;;
      --host|--host=?*)                         # option
            host=`option_processor $1 $2`
            option_sanitize $host
            shift
            ;;
      --itr|--itr=?*)                           # option
            itr=`option_processor $1 $2`
            option_sanitize $itr
            shift
            ;;
      --level|--level=?*)                       # option
            level=`option_processor $1 $2`
            option_sanitize $level
            shift
            ;;
      --level|--level=?*)                       # option
            level=`option_processor $1 $2`
            option_sanitize $level
            shift
            ;;
      --mark|--mark=?*)                         # option
            mark=`option_processor $1 $2`
            option_sanitize $mark
            shift
            ;;
      --maxjob|--maxjob=?*)                     # option
            maxjob=`option_processor $1 $2`
            option_sanitize $maxjob
            shift
            ;;
      --maxnode|--maxnode=?*)                   # option
            maxnode=`option_processor $1 $2`
            option_sanitize $maxnode
            shift
            ;;
      --name|--name=?*)                         # option
            name=`option_processor $1 $2`
            option_sanitize $name
            shift
            ;;
      --out-file|--out-file=?*)                 # option
            out_file=`option_processor $1 $2`
            option_sanitize $out_file
            shift
            ;;
      --password|--password=?*)                 # option
            password=`option_processor $1 $2`
            option_sanitize $password
            shift
            ;;
      --pretty|--pretty=?*)                     # option
            pretty=`option_processor $1 $2`
            option_sanitize $pretty
            shift
            ;;
      --python|--python=?*)                     # option
            python=`option_processor $1 $2`
            option_sanitize $python
            shift
            ;;
      --pythonpath|--pythonpath=?*)             # option
            pythonpath=`option_processor $1 $2`
            option_sanitize $pythonpath
            shift
            ;;
      --replay|--replay=?*)                         # option
            replay=`option_processor $1 "$2"`
            option_sanitize "$replay"
            shift
            ;;
      --returncode|--returncode=?*)                         # option
            returncode=`option_processor $1 "$2"`
            option_sanitize "$returncode"
            shift
            ;;
      --skip|--skip=?*)                         # option
            skip=`option_processor $1 "$2"`
            option_sanitize "$skip"
            shift
            ;;
      --stop|--stop=?*)                         # option
            stop=`option_processor $1 $2`
            option_sanitize $stop
            shift
            ;;
      --test|--test=?*)                         # option
            test=`option_processor $1 $2`
            option_sanitize $test
            shift
            ;;
      --timeout|--timeout=?*)                         # option
            timeout=`option_processor $1 $2`
            option_sanitize $timeout
            shift
            ;;
      --throttle|--throttle=?*)                         # option
            throttle=`option_processor $1 $2`
            option_sanitize $throttle
            shift
            ;;
    #  --tests|--tests=?*)                      # option
    #         tests=`option_processor $1 $2`
    #         option_sanitize $tests
    #         shift
    #         ;;
      --user|--user=?*)                         # option
            user=`option_processor $1 $2`
            option_sanitize $user
            shift
            ;;
      --verbose|--verbose=?*)                   # option
            verbose=`option_processor $1 $2`
            option_sanitize $verbose
            shift
            ;;
      --verbosity|--verbosity=?*)                   # option
            verbosity=`option_processor $1 $2`
            option_sanitize $verbosity
            shift
            ;;
      --version|--version=?*)                   # option
            version=`option_processor $1 $2`
            option_sanitize $version
            shift
            ;;
      --workers|--workers=?*)                   # option
            workers=`option_processor $1 $2`
            option_sanitize $workers
            shift
            ;;
      --volumes|--volumes=?*)                   # option
            volumes=`option_processor $1 $2`
            option_sanitize $volumes
            shift
            ;;
      --zoau|--zoau=?*)                         # option
            zoau=`option_processor $1 $2`
            option_sanitize $zoau
            shift
            ;;
        --)                                     # End Arg parsing
            #shift
            break
            ;;
        -?*)                                    # Warn for invalid but continue parsing for valid
            printf "${YEL}WARN${ENDC}: Unknown option (ignored) for $0: %s\n" "$1" >&2
            shift
            ;;
        *)
            if [ ! "$option_submitted" ]; then
                # Error when no '-' short or long '--' found and exit
                echo "${RED}ERROR${ENDC}: No long or short option has been submitted, use './ac --help to see options."
                exit 1
            fi

            # Nothing left to process, drop down into action processing
            break
    esac
    shift
done

# ==============================================================================
# Action processing
# ==============================================================================

if [ "$option_submitted" ] && [ "$option_submitted" = "--ac-bandit" ] ; then
    ac_bandit $level
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-build" ] ; then
    ac_build $name
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-galaxy-importer" ] ; then
    ac_galaxy_importer
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-changelog" ] ; then
    ac_changelog ${command:="lint"}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-module-doc" ] ; then
    ac_module_doc ${command:=""}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-install" ] ; then
    ac_install $version $name
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-lint" ] ; then
    ac_ansible_lint
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-sanity" ] ; then
    ac_sanity $version $name
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-test" ] ; then
    ac_test ${host:=""} ${python:=""} ${zoau:=""} ${file:=""} ${test:=""} ${debug:=""} ${name:=""} ${verbose:=""} ${mark:=""} ${stop:=""}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--test-concurrent" ] ; then
    test_concurrent "${host:=""}" "${user:=""}" "${python:=""}" "${zoau:=""}" "${pythonpath:=""}"\
    "${volumes:="222222,000000"}" "${file:="functional/*,unit/*"}" "${skip:="test_module_security.py"}"\
    "${itr:="50"}" "${replay:="5"}" "${timeout:="300"}" "${throttle:="True"}" "${workers:="1"}"\
    "${maxjob:="10"}" "${maxnode:="30"}" "${bal:="10"}" "${verbose:="False"}" "${verbosity:="0"}"\
    "${debug:="False"}" "${extra:="cd `pwd`"}" "${returncode:="False"}" "${name:=""}"
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-test-config" ] ; then
    ac_test_config ${name:=""}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--test-dep-find" ] ; then
    ac_test_dep_finder "${branch:=""}" "${skip:="test_module_security.py"}" ${pretty:="true"}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--test-pytest-find" ] ; then
    ac_test_pytest_finder ${file:="functional/*,unit/*"} "${skip:="test_module_security.py"}"\
    ${pretty:="true"}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--ac-version" ] ; then
    ac_version ${name:=""}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--file-encrypt" ] ; then
    file_encrypt $file $out_file $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--file-decrypt" ] ; then
    file_decrypt $file $out_file $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-auth" ] ; then
    host_auth $host
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-mount" ] ; then
    host_mount $host
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-mounts" ] ; then
    host_mounts
elif [ "$option_submitted" ] && [ "$option_submitted" = "--host-nodes" ] ; then
    host_nodes ${all:="true"}
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-setup" ] ; then
    venv_setup $password
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-start" ] ; then
    venv_start $name
elif [ "$option_submitted" ] && [ "$option_submitted" = "--venv-stop" ] ; then
    venv_stop $name
fi
