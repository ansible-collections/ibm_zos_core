---
- name: "Query job {{ job_id }}"
  ibm.ibm_zos_core.zos_job_query:
    job_name: "*"
    owner: "*"
    job_id: "{{ job_id }}"
  register: jobs_status

- name: Normalize return values
  ansible.builtin.set_fact:
    jobs_list: "{{ jobs_status.jobs }}"
  when: jobs_status is defined and jobs_status.jobs is defined and (jobs_status.jobs | length > 0)

- name: Extract ret_code.msg from {{ job_id }}
  set_fact:
    job_status: >-
      {% set rc = jobs_list[0].ret_code | default({}) %}
      {% if rc is mapping %}
        {% if rc.msg is defined and rc.msg is not none and rc.msg|string != '' %}
          {{ rc.msg | string | trim }}
        {% elif rc.msg_txt is defined and rc.msg_txt is not none and rc.msg_txt|string != '' %}
          {{ rc.msg_txt | string | trim }}
        {% elif rc.message is defined and rc.message is not none and rc.message|string != '' %}
          {{ rc.message | string | trim }}
        {% else %}
          UNKNOWN
        {% endif %}
      {% else %}
        {{ rc | string | trim }}
      {% endif %}
    job_active_from_msg: "{{ 'AC' in (jobs_list[0].ret_code.msg | default('')) }}"

- name: Clean job_status value
  set_fact:
    job_status: "{{ job_status | trim }}"

- name: Verify if {{ job_id }} is found
  when: jobs_list is not defined or jobs_list | length == 0
  set_fact:
    job_status: "JOB_NOT_FOUND"
    job_active_from_msg: "JOB_NOT_FOUND"

- name: See job_status and job_active from {{ job_id }}
  ansible.builtin.debug:
    msg:
      job_status: "{{ job_status }}"
      job_active: "{{ job_active_from_msg }}"