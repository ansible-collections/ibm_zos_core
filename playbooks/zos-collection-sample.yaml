###############################################################################
# Copyright (c) IBM Corporation 2020
###############################################################################

###############################################################################
# This sample playbook demonstrates using various modules included in the
# Red Hat Ansible Certified Content for IBM Z core collection.
#
# Usage:
#  ansible-playbook -i <inventory> <playbook>
#
# Example:
#  ansible-playbook -i inventory zos-collection-sample.yaml
#
# Notes:
#  This sample demonstrates various ways to perform tasks using Ansible z/OS
#  core modules. Each module has options available on how automation can be
#  controlled. This sample does not demonstrate all options; refer to
#  the documentation or use ansible-doc to learn more about those options.
#
#  When running this playbook, review the comments on how this sample
#  interacts with your target. Ensure that you have the required authority and
#  permissions such as writing to the target directories or creating data sets.
#
#  Data sets created for this sample will follow the pattern
#  <USER<.SOME.DATA.SET, where USER indicates the user who submits the playbook.
#  The user is identified by the Ansible variable `ansible_user`.
#
#  Additional facts for this playbook can be configured to override the defaults
#  by reviewing the "Fact setting" section of this playbook; for example,
#  `data_set_name` and `system_name`.
#
# Requirements:
#   IBM z/OS core collection 1.0.0 or later
#   ZOAU 1.0.1 or later
#
# Configure:
#   tgt_tmp_dir - this is the USS directory on the target which will be modified
#                 for this example.
#   ctl_tmp_dir - this is the directory on the controller which will be modified
#                 for this example.
# Optional:
#   data_set_name - name of the data set that will be created during
#                   execution of this sample.
#   system_name - the system name that will be used during this example,
#                 determined by executing `uname -n` on the target.
#   job_name - the job name that will be used in this sample. If you
#              change the HELLO.JCL job name, you must update this variable.
###############################################################################

---
- hosts: all
  collections:
    - ibm.ibm_zos_core
  gather_facts: no
  vars:
    tgt_tmp_dir: "/tmp"
    ctl_tmp_dir: "/tmp"
    job_name: "HELLO"

  environment: "{{ environment_vars }}"

  tasks:
    # ##########################################################################
    # Fact setting for use by this playbook
    # ##########################################################################
    - name: Setting fact `data_set_name` for use by this sample
      set_fact:
        data_set_name: "{{ ansible_user | upper }}.SOME.DATA.SET"

    - name: Fact `data_set_name` set with value
      debug:
        msg: "{{ data_set_name }}"

    - name: Detecting system name
      command: uname -n
      register: result

    - name: Setting fact `system_name` for use by this sample
      set_fact:
        system_name: "{{ result.stdout }}"

    - name: Fact `system_name` set with value
      debug:
        msg: "{{ system_name }}"

    # ##########################################################################
    # Ping the host with Ansible ping module to see if the target is available
    # ##########################################################################
    - name: Ping host - {{ inventory_hostname }}
      ping:
      register: result

    - name: Response
      debug:
        msg: "{{ result.ping }}"

    # ##########################################################################
    # Modules zos_job_submit, zos_job_query, zos_job_output, zos_data_set
    # ##########################################################################
    # +-------------------------------------------------------------------------
    # | Create a directory in USS on the target, write sample JCL on target,
    # | submit the target JCL, query for the submitted job and obtain the
    # | job output, demonstrate creating and deleting data sets
    # +-------------------------------------------------------------------------

    - name: Create directory {{ tgt_tmp_dir }}/ansible/jcl on USS
            target {{ system_name }}
      file:
        path: "{{ tgt_tmp_dir }}/ansible/jcl"
        state: directory

    - name: Write sample {{ job_name }} JCL in {{ tgt_tmp_dir }}/ansible/jcl
            on USS
            target {{ system_name }}
      shell: "echo {{ lookup('file', playbook_dir + '/files/{{job_name}}.jcl') | quote }} > {{ tgt_tmp_dir }}/ansible/jcl/{{job_name}}"
      changed_when: true
      register: result

    - name: Response for write sample {{job_name}} JCL in {{ tgt_tmp_dir }}/ansible/jcl
            on USS target {{ system_name }}
      debug:
        msg: "{{ result }}"

    - name: Submit {{job_name}} jcl located on target
            in {{ tgt_tmp_dir }}/ansible/jcl/{{job_name}}
      zos_job_submit:
        src: "{{ tgt_tmp_dir }}/ansible/jcl/{{job_name}}"
        location: USS
        wait: True

    - name: Response for submit {{job_name}} jcl located on target
            in {{ tgt_tmp_dir }}/ansible/jcl/{{job_name}}
      debug:
        msg: "{{ result }}"

    - name: Query the submitted job {{job_name}} on USS target {{ system_name }}
      zos_job_query:
        job_name: "{{job_name}}"
      register: result

    - name: Response for Query the submitted job {{job_name}}
            on USS target {{ system_name }}
      debug:
        msg: "{{ result }}"

    - name: Get {{job_name}} job output on USS target {{ system_name }}
      zos_job_output:
        job_name: "{{job_name}}"
      register: result

    - name: Response for Get {{job_name}} job output on USS target {{ system_name }}
      debug:
        msg: "{{ result }}"

    - name: Remove {{job_name}} JCL and folder on USS target {{ system_name }}
      file:
        path: "{{ tgt_tmp_dir }}/ansible"
        state: absent

    - name: Response for remove {{job_name}} JCL and folder on
            USS target {{ system_name }}
      debug:
        msg: "{{ result }}"

    - name: Create a PDS data set {{ data_set_name }}
      zos_data_set:
        name: "{{ data_set_name }}"
        type: pds
        size: 5M
        format: fb
        record_length: 25
        replace: yes
      register: result

    - name: Response create a PDS data set {{ data_set_name }}
      debug:
        msg: "{{ result }}"

    - name: Check if data set {{ data_set_name }} was created
      command: "dls {{ data_set_name }}"
      register: result
      changed_when: true

    - name: Response for check if data set {{ data_set_name }} was created
      debug:
        msg: "{{ result }}"

    - name: Delete data set {{ data_set_name }}
      zos_data_set:
        name: "{{ data_set_name }}"
        state: absent
      register: result

    - name: Response for delete data set {{ data_set_name }}
      debug:
        msg: "{{ result }}"
