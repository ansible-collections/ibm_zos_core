..
...........................................................................
.. © Copyright IBM Corporation 2020 . ..
...........................................................................

zOS Ansible Module Testing
==========================

This document outlines processes to run and develop test cases for z/OS
Ansible modules.

-  `z/OS Ansible Module Testing <#zos-ansible-module-testing>`__
-  `Prerequisites <#prerequisites>`__

   -  `Control Node <#control-node>`__
   -  `z/OS Target Host <#zos-target-host>`__
  
-  `Running Test Cases <#running-test-cases>`__

   -  `Install Requirements <#install-requirements>`__
   -  `SSH Keys <#ssh-keys>`__
   -  `Generate and add new SSH key <#generate-and-add-new-ssh-key>`__
   -  `Copy public key to target
      host <#copy-public-key-to-target-host>`__
   -  `Run All Tests <#run-all-tests>`__
   -  `Run Unit Tests <#run-unit-tests>`__
   -  `Run Functional Tests <#run-functional-tests>`__
   -  `Configuration and Arguments <#configuration-and-arguments>`__
   -  `YAML Arguments <#yaml-arguments>`__
   -  `CLI Arguments <#cli-arguments>`__

-  `Development <#development>`__

   -  `Unit Testing with pytest <#unit-testing-with-pytest>`__
   -  `Mocking z/OS Dependent Packages, Methods, and
      Functions <#mocking-zos-dependent-packages-methods-and-functions>`__
   -  `Unit Testing Resources <#unit-testing-resources>`__
   -  `zos\_import\_mocker <#zosimportmocker>`__

      -  `Example zos\_import\_mocker
         usage <#example-zosimportmocker-usage>`__

   -  `Functional Testing with
      pytest <#functional-testing-with-pytest>`__
   -  `Functional Testing Resources <#functional-testing-resources>`__
   -  `ansible\_zos\_module <#ansiblezosmodule>`__

      -  `Details <#details>`__
      -  `Example ansible\_zos\_module
         usage <#example-ansiblezosmodule-usage>`__
      -  `Additional Development Tips <#additional-development-tips>`__

Prerequisites
-------------

Control Node
~~~~~~~~~~~~

-  Preferably latest Python 3.X
-  Up to date Ansible, 2.8 confirmed working

z/OS Target Host
~~~~~~~~~~~~~~~~

-  `Z Open Automation
   Utilities <https://www.ibm.com/support/knowledgecenter/en/SSKFYE_1.0.0/zoautil_overview.html>`__
-  Python 3 >= 3.6

Running Test Cases
------------------

Install Requirements
~~~~~~~~~~~~~~~~~~~~

From root of collection:

.. code:: bash

    pip3 install -r tests/requirements.txt

If the above command responds with:
``ERROR: Could not install packages due to an EnvironmentError: [Errno 13] Permission denied``

.. code:: bash

    pip3 install --user -r tests/requirements.txt

SSH Keys
~~~~~~~~

Generate and add new SSH key
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Using `ssh-keygen <https://www.ssh.com/ssh/keygen/>`__ and
`ssh-add <https://www.ssh.com/ssh/add>`__

.. figure:: https://zenhub.ibm.com/images/5c75c71e85b6d5070636e1d8/8bd18b60-7517-4301-b3d4-17857e3a5e49
   :alt: addkey.gif

   addkey.gif
Copy public key to target host
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Using `ssh-copy-id <https://www.ssh.com/ssh/copy-id>`__

.. figure:: https://zenhub.ibm.com/images/5c75c71e85b6d5070636e1d8/63102702-1dd4-4578-8539-33beb496bf69
   :alt: ssh-copy-id.gif

   ssh-copy-id.gif
Run All Tests
~~~~~~~~~~~~~

First, complete the `functional test configuration
steps <#run-functional-tests>`__.

**If Python 2 is default**

Assuming the absolute path of the YAML configuration file is
``/home/myuser/test_config.yml``

.. code:: bash

    python3 -m pytest --host-pattern=all --zinventory=/home/myuser/test_config.yml

**If Python 3 is default**

Assuming the absolute path of the YAML configuration file is
``/home/myuser/test_config.yml``

.. code:: bash

    pytest --host-pattern=all --zinventory=/home/myuser/test_config.yml

By default, ``--zinventory`` (or ``-Z`` ) is set to ``test_config.yml``
in the working directory.

Run Unit Tests
~~~~~~~~~~~~~~

The unit tests should not require access to a z/OS system to run and
require minimal configuration to get started.

**Navigate to the unit tests folder**

::

    ansible_collections_ibm_zos_core
    └── tests
        └── units

**If Python 2 is default**

.. code:: bash

    python3 -m pytest

**If Python 3 is default**

.. code:: bash

    pytest

Run Functional Tests
~~~~~~~~~~~~~~~~~~~~

The functional tests will require access to a z/OS system. This requires
minimal additional configuration.

Configuration and Arguments
~~~~~~~~~~~~~~~~~~~~~~~~~~~

YAML Arguments
^^^^^^^^^^^^^^

Create a YAML file containing information needed to run the functional
tests.

+----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------+-----------+
| Argument       | Description                                                                                                                                                                                                                                                       | Required   | Aliases   |
+================+===================================================================================================================================================================================================================================================================+============+===========+
| host           | The z/OS target host to connect to.                                                                                                                                                                                                                               | True       |           |
+----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------+-----------+
| user           | The username for authentication with host.                                                                                                                                                                                                                        | True       |           |
+----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------+-----------+
| python\_path   | The absolute path to the python interpreter on the z/OS target host.                                                                                                                                                                                              | True       |           |
+----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------+-----------+
| environment    | A list of key-value pairs containing all environment variables that need to be set on the z/OS target host before running Python/Ansible. It is important to add two sets of quotes when quotations are desired in the environment variable *export* statement.   | False      |           |
+----------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------+-----------+

Example:

.. code:: yaml

    host: tivlp02.svl.ibm.com
    user: bbecker
    python_path: /var/python27/python27/bin/python
    environment:
        INSTALL_PYTHON: /var/python27
        RELEASE_NAME: python-2017-04-12
        RELEASE_TYPE: py27
        RELEASE_DIR: /var/python27
        PKGS_BASE: /var/python27/pkgs
        PYTHON_ENV: python27
        PYTHON_HOME: /var/python27/python27
        PYTHON: /var/python27/python27/bin
        LIBPATH: /var/python27/python27/lib:${LIBPATH}
        FFI_LIB: /var/python27/python27/lib/ffi
        TERMINFO: /var/python27/python27/share/terminfo
        PKG_CONFIG_PATH: /var/python27/python27/share/pkgconfig:/var/python27/python27/lib/pkgconfig
        CURL_CA_BUNDLE: /var/python27/python27/etc/ssl/cacert.pem
        # environment variables for mvsutils/mvscmd
        _: /hsstools/bin/env
        _BPXK_AUTOCVT: ON
        # * ensure quotations are provided correctly where needed!!
        _CEE_RUNOPTS: '"FILETAG(AUTOCVT,AUTOTAG) POSIX(ON)"'
        _TAG_REDIR_ERR: txt
        _TAG_REDIR_IN: txt
        _TAG_REDIR_OUT: txt
        TOOLS_ROOT: /hsstools
        GIT_SHELL: /hsstools/bin/bash
        GIT_EXEC_PATH: /hsstools/git-2.14.4/libexec/git-core
        GIT_TEMPLATE_DIR: /hsstools/git-2.14.4/share/git-core/templates
        PATH: /hsstools/git-2.14.4/bin:/bin:/var/bin:/usr/lpp/java/J8.0/bin:/var/python27/python-2017-04-12-py27/python27/bin
        # Java environment
        JAVA_HOME: /usr/lpp/java/J8.0_64

CLI Arguments
^^^^^^^^^^^^^

**``--zinventory``** (or **``-Z``** ) is used to provide the absolute
path to the configuration YAML file.

By default, ``--zinventory`` (or ``-Z`` ) is set to ``test_config.yml``
in the working directory.

Additionally, certain select arguments from
`pytest-ansible <https://github.com/ansible/pytest-ansible>`__ can be
used. These can be passed in on the command line or provided in the YAML
configuration file.

Some arguments marked *NOT SUPPORTED* may work with additional testing.

.. code:: bash

    py.test \
        NOT SUPPORTED [--inventory <path_to_inventory>] \
        REQUIRED [--host-pattern <host-pattern>] \
        [--connection <plugin>] \
        BROKEN [--module-path <path_to_modules] \
        [--user <username>] \
        [--become] \
        [--become-user <username>] \
        [--become-method <method>] \
        NOT SUPPORTED [--limit <limit>] \
        [--check]

**``--host-pattern=all`` is required to be provided.**

Normally, ``module_path`` in YAML config, or ``--module-path`` on CLI
would be valid parameters, which would function as an alternative to
`setting the ANSIBLE\_LIBRARY environment
variable <#add-module-directory-to-ansiblelibrary>`__. Unfortunately,
the option seems to be broken in the latest Ansible release.

Add module directory to ANSIBLE\_LIBRARY
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If modules are in

::

    /
    └── Users
        └── myuser
            └── ansible_collections_ibm_zos_core
                └── plugins
                    └── modules

The command to add the directory is

.. code:: bash

    export ANSIBLE_LIBRARY=/Users/myuser/ansible_collections_ibm_zos_core/plugins/modules

**Navigate to the functional tests folder**

::

    ansible_collections_ibm_zos_core
    └── tests
        └── functional

**If Python 2 is default**

Assuming the absolute path of the YAML configuration file is
``/home/myuser/test_config.yml``

.. code:: bash

    python3 -m pytest --host-pattern=all --zinventory=/home/myuser/test_config.yml

**If Python 3 is default**

Assuming the absolute path of the YAML configuration file is
``/home/myuser/test_config.yml``

.. code:: bash

    pytest --host-pattern=all --zinventory=/home/myuser/test_config.yml

Development
-----------

This section provides an overview of unit and functional testing z/OS
Ansible modules. Multiple `pytest
fixtures <https://docs.pytest.org/en/latest/fixture.html>`__ are
provided to simplify the testing process.

Unit Testing with pytest
~~~~~~~~~~~~~~~~~~~~~~~~

Mocking z/OS Dependent Packages, Methods, and Functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unit tests should not require access to a z/OS system for execution.
When functions or methods are dependent on a missing z/OS Python
package, such as ``zoautil_py``, the imports of both the package and
direct calls to the missing library should be "mocked".

Unit Testing Resources
^^^^^^^^^^^^^^^^^^^^^^

-  `unittest.mock <https://docs.python.org/3/library/unittest.mock.html>`__
   - allows you to replace parts of your system under test with mock
   objects and make assertions about how they have been used.

``pip`` can be used to install ``mock`` in python 2 and 3. In Python 3,
``unittest.mock`` is included with the Python installation.

**Please note:** while examples may reference ``unittest.mock``, or
``mock`` directly for certain purposes, the ``pytest`` framework is the
recommended testing framework. The use of the ``unittest`` framework is
not recommended. -
`pytest-mock <https://github.com/pytest-dev/pytest-mock>`__ - installs a
``mocker`` fixture which is a thin-wrapper around the patching API
provided by the mock package, but with the benefit of not having to
worry about undoing patches at the end of a test.

`zos\_import\_mocker <../tests/conftest.py#L38>`__
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``zos_import_mocker`` pytest fixture is designed to simplify mocking
import dependencies without causing side-effects.

``zos_import_mocker`` returns two items when it is provided to a test:

1. A mocker object from
   `pytest-mock <https://github.com/pytest-dev/pytest-mock>`__.

From the docs: > a thin-wrapper around the patching API provided by the
mock package, but with the benefit of not having to worry about undoing
patches at the end of a test

::

    Behind the scenes, `zos_import_mocker` uses the mocker fixture to patch the `zoautil_py` package with a MagicMock object.
    With `zoautil_py` patched, modules that depend on `zoautil_py` can be imported and used without raising exceptions.

2. The ``perform_imports()`` function. ``perform_imports()`` accepts a
   single import string or a list of import strings as arguments.
   Imports that depend on ``zoautil_py`` should utilize this function to
   simplify imports.

   ``perform_imports()`` returns the imports for use by the test cases.
   If a single import string was provided, a single import is returned.
   If a list of import strings was provided, a list of imports is
   returned.

   The example code assigns the name ``importer()`` to the returned
   ``perform_imports()`` function.

``zos_import_mocker`` uses function scope. Therefore, the mock of
``zoautil_py`` and any operations performed with the provided mocker
will be cleared after each function.

Example ``zos_import_mocker`` usage
'''''''''''''''''''''''''''''''''''

.. code:: python

    from __future__ import (absolute_import, division)
    __metaclass__ = type


    from ansible.module_utils.basic import AnsibleModule
    import pytest
    import sys
    from mock import call

    # The IMPORT_NAME import string is passed to importer() in each test case
    IMPORT_NAME = 'ansible_collections_ibm_zos_core.plugins.modules.datasets.zos_dataset'


    # * Tests for create_dataset()

    dummy_dict = {
        'type': 'pds',
        'size': '50M'
    }
    test_data = [
        ('test1.tester.test', dummy_dict, 0, True),
        ('test1.tester.test', {}, 0, True),
        (None, {}, 1, False),
        ('test1.tester.test', None, 0, True),
        ('test1.tester.test', dummy_dict, 1, False)
    ]
    @pytest.mark.parametrize("dsname,args,return_value,expected", test_data)
    def test_create_dataset_various_args(zos_import_mocker, dsname, args, return_value, expected):
        mocker, importer = zos_import_mocker
        ds = importer(IMPORT_NAME)
        passed = True
        mocker.patch('zoautil_py.Datasets.create',
                    create=True, return_value=return_value)
        try:
            ds.create_dataset(dsname, args)
        except ds.DatasetCreateError:
            passed = False
        except TypeError as e:
            # MagicMock throws TypeError when input args is None
            # But if it gets that far we consider it passed
            if 'MagicMock' not in str(e):
                passed = False
        assert passed == expected


    def test_create_dataset_missing_all_args(zos_import_mocker):
        mocker, importer = zos_import_mocker
        ds = importer(IMPORT_NAME)
        mocker.patch('zoautil_py.Datasets.create', create=True)
        with pytest.raises(TypeError):
            ds.create_dataset()


    def test_create_dataset_missing_second_arg(zos_import_mocker):
        mocker, importer = zos_import_mocker
        ds = importer(IMPORT_NAME)
        patched_method = mocker.patch(
            'zoautil_py.Datasets.create', create=True, return_value=0)
        ds.create_dataset('testname')
        patched_method.assert_called_with('testname')


    def test_create_dataset_arg_expansion(zos_import_mocker):
        mocker, importer = zos_import_mocker
        ds = importer(IMPORT_NAME)
        item1 = 'value1'
        item2 = 'value2'
        item3 = 'value3'
        to_expand = {
            'item1': item1,
            'item2': item2,
            'item3': item3
        }
        patched_method = mocker.patch(
            'zoautil_py.Datasets.create', create=True, return_value=0)
        ds.create_dataset('testname', to_expand)
        patched_method.assert_called_with(
            'testname', item1=item1, item2=item2, item3=item3)


    def test_create_dataset_exception_receiving_name(zos_import_mocker):
        mocker, importer = zos_import_mocker
        ds = importer(IMPORT_NAME)
        mocker.patch('zoautil_py.Datasets.create', create=True, return_value=1)
        ds_name = 'testdsn'
        patched_method = mocker.patch.object(
            ds.DatasetCreateError, '__init__', return_value=None)
        try:
            ds.create_dataset('testdsn')
        except ds.DatasetCreateError:
            pass
        patched_method.assert_called_with(ds_name)

Functional Testing with pytest
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Functional tests should execute modules on the z/OS target node and
validate return values are valid and desired action(s) are achieved.

Functional Testing Resources
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-  `pytest-ansible <https://github.com/ansible/pytest-ansible>`__ -
   contains a plugin for py.test which adds several fixtures for running
   ansible modules, or inspecting ansible\_facts.

The plugin from ``pytest-ansible`` is used by one of our own pytest
fixtures.

``pytest-ansible`` does not work out of the box for z/OS Ansible modules
due to ``pytest-ansible`` using the ``adhoc`` command to drive module
testing behind the scenes. ``adhoc`` commands do not support setting
environment variables on the target host, which is needed to run z/OS
Python.

`ansible\_zos\_module <../tests/conftest.py#L23>`__
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``ansible_zos_module`` pytest fixture `reads the YAML
configuration <#yaml-configuration-and-arguments>`__, provisions a
temporary python interpreter, and sets up the ``ansible`` plugin from
``pytest-ansible``.

``ansible_zos_module`` returns the equivalent of the `pytest-ansible
adhoc
fixture <https://github.com/ansible/pytest-ansible#fixture-ansible_adhoc>`__
and can be used similarly.

Details
'''''''

``ansible_zos_module`` uses the ``request`` and
`z\_python\_interpreter <../tests/conftest.py>`__ fixtures.

The ``z_python_interpreter`` fixture performs the following actions:

1. Parses the YAML config.
2. Builds our new interpreter by wrapping the provided Python
   interpreter with needed environment configuration.
3. Builds a dictionary containing all of the arguments from the YAML
   configuration that should be passed to the ``ansible pytest-ansible``
   plugin.

The ``z_python_interpreter`` fixture returns two values:

1. ``interpreter`` - the temporary interpreter string.

``ansible_zos_module`` injects the interpreter string into the default
interpreter path variable used by the ``ansible pytest-ansible`` plugin
so the temporary interpreter string is used when running modules.

::

    The `interpreter` variable is a string containing all of the environment variable exports followed by the python interpreter.
    The export statements are required, otherwise USS will not execute the interpreter.

2. ``inventory`` - a dictionary containing all of the arguments to
   provide during ``ansible pytest-ansible`` plugin initialization.

``ansible_zos_module`` handles the plugin initialization.

Note: ``z_python_interpreter`` shouldn't be used directly. It is solely
used as a fixture to ``ansible_zos_module``.

``ansible_zos_module`` is scoped to the test session. Therefore, only
one temporary Python interpreter is used each time Pytest is run.

Example ``ansible_zos_module`` usage
''''''''''''''''''''''''''''''''''''

.. code:: python

    from __future__ import absolute_import, division

    import os
    import sys
    import warnings

    import ansible.constants
    import ansible.errors
    import ansible.utils
    import pytest

    __metaclass__ = type


    def test_dataset_creation(ansible_zos_module):
        hosts = ansible_zos_module
        # * hosts.all.zos_dataset tells adhoc to run the zos_datset module against all provided hosts.
        # * In our case, there is only a single host. This may change in the future.
        results = hosts.all.zos_dataset(name='imsbank.ims1.test01', state='present', replace=True)
        # * results.contacted contains a list where each list item represents a host on which the module ran
        for result in results.contacted.values():
            assert result['state'] == 'present'
            assert result['changed'] == True
            assert result.get('module_stderr') == None

Additional Development Tips
'''''''''''''''''''''''''''

When using ``ansible_zos_module``, it may be beneficial to view the
structure output by ``results.contacted`` or other objects.

The `pprint <https://docs.python.org/3/library/pprint.html>`__ Python
module can be used to format output.

By using ``pprint.pprint(vars(someobject))``, we can print content from
any object containing ``__dict__``.

.. code:: python

    from __future__ import absolute_import, division

    import os
    import sys
    import warnings

    import ansible.constants
    import ansible.errors
    import ansible.utils
    import pytest
    from pprint import pprint

    __metaclass__ = type


    def test_dataset_creation(ansible_zos_module):
        hosts = ansible_zos_module
        # * hosts.all.zos_dataset tells adhoc to run the zos_datset module against all provided hosts.
        # * In our case, there is only a single host. This may change in the future.
        results = hosts.all.zos_dataset(name='imsbank.ims1.test01', state='present', replace=True)
        # * results.contacted contains a list where each list item represents a host on which the module ran
        pprint(vars(results))
        for result in results.contacted.values():
            assert result['state'] == 'present'
            assert result['changed'] == True
            assert result.get('module_stderr') == None

To get debug output when running pytest, use the ``-s`` flag.

**If Python 2 is default**

Assuming the absolute path of the YAML configuration file is
``/home/myuser/test_config.yml``

.. code:: bash

    python3 -m pytest -s --host-pattern=all --zinventory=/home/myuser/test_config.yml

**If Python 3 is default**

Assuming the absolute path of the YAML configuration file is
``/home/myuser/test_config.yml``

.. code:: bash

    pytest -s --host-pattern=all --zinventory=/home/myuser/test_config.yml

